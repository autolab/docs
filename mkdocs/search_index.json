{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to the Autolab Docs\n\n\nAutolab is a course management and homework autograding platform that enables instructors to offer programming labs to their students. It includes gradebooks, rosters, handins/handouts, lab writeups, code annotation, manual grading, late penalties, grace days, cheat checking, meetings, partners, and bulk emails.\n\n\nGetting Started\n\n\nFor information on how to use Autolab go to the \ninstructors page\n. To learn how to write an autograded lab go to the \nlab authors page\n.\n\n\nAutolab consists of two services, the Ruby on Rails frontend and \nTango\n, the Python grading server. In order to use all features of Autolab, we highly recommend installing both services.\n\n\nCurrently, we have support for installation on \nUbuntu 14.04+\n and \nMac OSX\n.\n\n\nUbuntu 14.04+\n\n\nThe fastest way to install Autolab on Ubuntu is the OneClick option. This is recommended for running on external services like Heroku, EC2, or other Ubuntu VM providers. Find more information \nhere\n.\n\n\nDevelopment Only\n\n\nThe following command runs a script that installs Autolab and all gems. You will be prompted for the \nsudo\n password and other confirmations. You can see the details of the script \nhere\n.\n\n\n1\nAUTOLAB_SCRIPT\n=\n`\nmktemp\n`\n \n \n\\c\nurl -sSL https://raw.githubusercontent.com/autolab/Autolab/master/bin/setup.sh \n \n$AUTOLAB_SCRIPT\n \n \n\\b\nash \n$AUTOLAB_SCRIPT\n\n\n\n\n\n\n\nNext, \ninstall Tango\n, the RESTful autograding server, seperately.\n\n\nMac OSX\n\n\nFollow the step-by-step instructions below:\n\n\n\n\n\n\nInstall \nrbenv\n (use the Basic GitHub Checkout method)\n\n\n\n\n\n\nInstall \nruby-build\n as an rbenv plugin:\n\n\n1\ngit clone https://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build\n\n\n\n\n\n\nRestart your shell at this point in order to start using your newly installed rbenv\n\n\n\n\n\n\nInstall the correct version of ruby:\n\n\n1\nrbenv install \n$(\ncat .ruby-version\n)\n\n\n\n\n\n\n\nAt this point, confirm that \nrbenv\n is working (you might need to restart your shell):\n\n\n1\n2\n3\n4\n5\n$ which ruby\n~/.rbenv/shims/ruby\n\n$ which rake\n~/.rbenv/shims/rake\n\n\n\n\n\n\n\n\n\n\nInstall \nbundler\n:\n\n\n1\n2\ngem install bundler\nrbenv rehash\n\n\n\n\n\n\n\n\n\n\nClone the Autolab repo into any desired directory:\n\n\n1\ngit clone https://github.com/autolab/Autolab.git\n\n\n\n\n\n\n\n\n\n\nInstall the required gems (run the following commands in the cloned Autolab repo):\n\n\n1\n2\ncd\n bin\nbundle install\n\n\n\n\n\n\nRefer to the \nFAQ\n for issues installing gems\n\n\n\n\n\n\nInstall one of two database options\n\n\n\n\nSQLite\n should \nonly\n be used in development\n\n\nMySQL\n can be used in development or production\n\n\n\n\n\n\n\n\nConfigure your database:\n\n\n1\ncp config/database.yml.template config/database.yml\n\n\n\n\n\n\nEdit \ndatabase.yml\n with the correct credentials for your chosen database. Refer to the \nFAQ\n for any issues.\n\n\n\n\n\n\nConfigure the Devise Auth System with a unique key (run these commands exactly):\n\n\n1\n2\ncp config/nitializers/devise.rb.template config/initializers/devise.rb\nsed -i \ns/\nYOUR-SECRET-KEY\n/`bundle exec rake secret`/g\n initializers/devise.rb\n\n\n\n\n\n\nFill in \nYOUR_WEBSITE\n in \nconfig/initializers/devise.rb\n file. To skip this step for now, fill with \nfoo.bar\n.\n\n\n\n\n\n\nConfigure school/organization specific information (new feature):\n\n\n1\ncp config/school.yml.template config/school.yml\n\n\n\n\n\n\nEdit \nschool.yml\n with your school/organization specific names and emails\n\n\n\n\n\n\nCreate and initialize the database tables:\n\n\n1\nbundle \nexec\n rake db:create\n\n\n\n\n\n\nDo not forget to use \nbundle exec\n in front of every rake/rails command.\n\n\n\n\n\n\nPopulate dummy data (development only):\n\n\n1\nbundle \nexec\n rake autolab:populate\n\n\n\n\n\n\n\n\n\n\nStart the rails server:\n\n\n1\nbundle \nexec\n rails s -p 3000\n\n\n\n\n\n\n\n\n\n\nGo to localhost:3000 and login with \nDeveloper Login\n:\n\n\n1\nEmail: \nadmin@foo.bar\n.\n\n\n\n\n\n\n\n\n\n\nInstall \nTango\n, the backend autograding service.\n\n\n\n\n\n\nNow you are all set to start using Autolab! Visit the \ninstructors\n or \nlab authors\n pages for more info.\n\n\n\n\n\n\nFAQ\n\n\nThis is a general list of questions that we get often. If you find a solution to an issue not mentioned here,\nplease contact us at \n\n\nUbuntu Script Bugs\n\n\nIf you get the following error\n\n\n1\n2\nFailed to fetch http://dl.google.com/linux/chrome/deb/dists/stable/Release  \nUnable to find expected entry \nmain/binary-i386/Packages\n in Release file \n(\nWrong sources.list entry or malformed file\n)\n\n\n\n\n\n\n\nthen follow the solution in \nthis post\n. \n\n\nWhere do I find the MySQL username and password?\n\n\nIf this is your first time logging into MySQL, your username is 'root'. You may also need to set the root password:\n\n\nStart the server:\n\n\n1\nsudo /usr/local/mysql/support-files/mysql.server start\n\n\n\n\n\n\nSet the password:\n\n\n1\nmysqladmin -u root password \n[New_Password]\n\n\n\n\n\n\n\nIf you lost your root password, refer to the \nMySQL wiki\n\n\nBundle Install Errors\n\n\nThis happens as gems get updated. These fixes are gem-specific, but two common ones are\n\n\neventmachine\n\n\n1\nbundle config build.eventmachine --with-cppflags\n=\n-I/usr/local/opt/openssl/include\n\n\n\n\n\n\nlibv8\n\n\n1\nbundle config build.libv8 --with-system-v8\n\n\n\n\n\n\nRun \nbundle install\n again\n\n\nIf this still does not work, try exploring \nthis StackOverflow link\n\n\nCan't connect to local MySQL server through socket\n\n\nMake sure you've started the MySQL server and double-check the socket in \nconfig/database.yml\n\n\nThe default socket location is \n/tmp/mysql.sock\n.", 
            "title": "Getting Started"
        }, 
        {
            "location": "/#welcome-to-the-autolab-docs", 
            "text": "Autolab is a course management and homework autograding platform that enables instructors to offer programming labs to their students. It includes gradebooks, rosters, handins/handouts, lab writeups, code annotation, manual grading, late penalties, grace days, cheat checking, meetings, partners, and bulk emails.", 
            "title": "Welcome to the Autolab Docs"
        }, 
        {
            "location": "/#getting-started", 
            "text": "For information on how to use Autolab go to the  instructors page . To learn how to write an autograded lab go to the  lab authors page .  Autolab consists of two services, the Ruby on Rails frontend and  Tango , the Python grading server. In order to use all features of Autolab, we highly recommend installing both services.  Currently, we have support for installation on  Ubuntu 14.04+  and  Mac OSX .", 
            "title": "Getting Started"
        }, 
        {
            "location": "/#ubuntu-1404", 
            "text": "The fastest way to install Autolab on Ubuntu is the OneClick option. This is recommended for running on external services like Heroku, EC2, or other Ubuntu VM providers. Find more information  here .", 
            "title": "Ubuntu 14.04+"
        }, 
        {
            "location": "/#development-only", 
            "text": "The following command runs a script that installs Autolab and all gems. You will be prompted for the  sudo  password and other confirmations. You can see the details of the script  here .  1 AUTOLAB_SCRIPT = ` mktemp `     \\c url -sSL https://raw.githubusercontent.com/autolab/Autolab/master/bin/setup.sh    $AUTOLAB_SCRIPT     \\b ash  $AUTOLAB_SCRIPT    Next,  install Tango , the RESTful autograding server, seperately.", 
            "title": "Development Only"
        }, 
        {
            "location": "/#mac-osx", 
            "text": "Follow the step-by-step instructions below:    Install  rbenv  (use the Basic GitHub Checkout method)    Install  ruby-build  as an rbenv plugin:  1 git clone https://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build   Restart your shell at this point in order to start using your newly installed rbenv    Install the correct version of ruby:  1 rbenv install  $( cat .ruby-version )    At this point, confirm that  rbenv  is working (you might need to restart your shell):  1\n2\n3\n4\n5 $ which ruby\n~/.rbenv/shims/ruby\n\n$ which rake\n~/.rbenv/shims/rake     Install  bundler :  1\n2 gem install bundler\nrbenv rehash     Clone the Autolab repo into any desired directory:  1 git clone https://github.com/autolab/Autolab.git     Install the required gems (run the following commands in the cloned Autolab repo):  1\n2 cd  bin\nbundle install   Refer to the  FAQ  for issues installing gems    Install one of two database options   SQLite  should  only  be used in development  MySQL  can be used in development or production     Configure your database:  1 cp config/database.yml.template config/database.yml   Edit  database.yml  with the correct credentials for your chosen database. Refer to the  FAQ  for any issues.    Configure the Devise Auth System with a unique key (run these commands exactly):  1\n2 cp config/nitializers/devise.rb.template config/initializers/devise.rb\nsed -i  s/ YOUR-SECRET-KEY /`bundle exec rake secret`/g  initializers/devise.rb   Fill in  YOUR_WEBSITE  in  config/initializers/devise.rb  file. To skip this step for now, fill with  foo.bar .    Configure school/organization specific information (new feature):  1 cp config/school.yml.template config/school.yml   Edit  school.yml  with your school/organization specific names and emails    Create and initialize the database tables:  1 bundle  exec  rake db:create   Do not forget to use  bundle exec  in front of every rake/rails command.    Populate dummy data (development only):  1 bundle  exec  rake autolab:populate     Start the rails server:  1 bundle  exec  rails s -p 3000     Go to localhost:3000 and login with  Developer Login :  1 Email:  admin@foo.bar .     Install  Tango , the backend autograding service.    Now you are all set to start using Autolab! Visit the  instructors  or  lab authors  pages for more info.", 
            "title": "Mac OSX"
        }, 
        {
            "location": "/#faq", 
            "text": "This is a general list of questions that we get often. If you find a solution to an issue not mentioned here,\nplease contact us at", 
            "title": "FAQ"
        }, 
        {
            "location": "/#ubuntu-script-bugs", 
            "text": "If you get the following error  1\n2 Failed to fetch http://dl.google.com/linux/chrome/deb/dists/stable/Release  \nUnable to find expected entry  main/binary-i386/Packages  in Release file  ( Wrong sources.list entry or malformed file )    then follow the solution in  this post .", 
            "title": "Ubuntu Script Bugs"
        }, 
        {
            "location": "/#where-do-i-find-the-mysql-username-and-password", 
            "text": "If this is your first time logging into MySQL, your username is 'root'. You may also need to set the root password:  Start the server:  1 sudo /usr/local/mysql/support-files/mysql.server start   Set the password:  1 mysqladmin -u root password  [New_Password]    If you lost your root password, refer to the  MySQL wiki", 
            "title": "Where do I find the MySQL username and password?"
        }, 
        {
            "location": "/#bundle-install-errors", 
            "text": "This happens as gems get updated. These fixes are gem-specific, but two common ones are  eventmachine  1 bundle config build.eventmachine --with-cppflags = -I/usr/local/opt/openssl/include   libv8  1 bundle config build.libv8 --with-system-v8   Run  bundle install  again  If this still does not work, try exploring  this StackOverflow link", 
            "title": "Bundle Install Errors"
        }, 
        {
            "location": "/#cant-connect-to-local-mysql-server-through-socket", 
            "text": "Make sure you've started the MySQL server and double-check the socket in  config/database.yml  The default socket location is  /tmp/mysql.sock .", 
            "title": "Can't connect to local MySQL server through socket"
        }, 
        {
            "location": "/instructors/", 
            "text": "Instructor's Guide\n\n\nThis document provides instructors with a brief overview of the basic ideas and capabilities of the Autolab system. It's meant to be read from beginning to end the first time. \n\n\nUsers\n\n\nUsers\n are either \ninstructors\n, \ncourse assistants\n, or \nstudents\n. Instructors have full permissions. Course assistants are only allowed to enter grades. Students see only their own work. Each user is uniquely identified by their email address. You can change the permissions for a particular user at any time. Note that some instructors opt to give some or all of their TAs instructor status.\n\n\nRoster\n\n\nThe \nroster\n holds the list of users. You can add and remove users one at a time, or in bulk by uploading a CSV file in the general Autolab format:\n\n\nSemester,email,last_name,first_name,school,major,year,grading_policy,courseNumber,courseLecture,section\n\n\nor in the format that is exported by the CMU S3 service:\n\n\n\"Semester\",\"Course\",\"Section\",\"Lecture\",\"Mini\",\"Last Name\",\"First Name\",\"MI\",\"AndrewID\",\"Email\",\"College\",\"Department\",...\n\n\n\n\n\nAttention CMU Instructors:\n\n\nS3 lists each student twice: once in a lecture roster, which lists the lecture number (e.g., 1, 2,...) in the section field, and once in a section roster, which lists the section letter (e.g., A, B,...) in the section field. Be careful not to import the lecture roster. Instead, export and upload each section individually. Or you can export everything from S3 with a single action, edit out the roster entries for the lecture(s), and then upload a single file to Autolab with all of the sections.\n\n\n\n\nFor the bulk upload, you can choose to either: \n\n\n\n \nadd\n any new students in the roster file to the Autolab roster, or to \n\n\n \nupdate\n the Autolab roster by marking students missing from roster files as \ndropped\n.\n \n\n\n\nInstructors and course assistants are never marked as dropped. User accounts are never deleted. Students marked as dropped can still see their work, but cannot submit new work and do not appear on the instructor gradebook. Instructors can change the dropped status of a student at any time. \n\n\nOnce a student is added to the roster for a course, then that course becomes visible to the student when they visit the Autolab site. A student can be enrolled in an arbitrary number of Autolab courses.\n\n\nLabs (Assessments)\n\n\nA \nlab\n (or \nassessment\n) \nis broadly defined as a submission set; it is anything that\nyour students make submissions (handins) for. This could be a programming assignment, a\ntyped homework, or even an in-class exam. You can create labs from scratch, or reuse them from previous semesters.\nSee the companion [[Guide for Lab Authors]] for info on writing and installing labs. \n\n\nAssessment Categories\n\n\nYou can tag each assessment with an arbitrary user-defined \ncategory\n, e.g., \"Lab\", \"Exam\", \"Homework\".\n\n\nAutograders and Scoreboards\n\n\nLabs can be \nautograded\n or not, at your disrcretion. When a student submits to an autograded lab, Autolab runs an instructor-supplied \nautograder\n program that assigns scores to one or more problems associated with the lab. Autograded labs can have an optional \nscoreboard\n that shows (anonymized) results in real-time. See the companion [[Guide for Lab Authors]] for details on writing autograded labs with scoreboards.\n\n\nImportant Dates\n\n\nA lab has a \nstart date\n, \ndue date\n, \nend date\n and \ngrading deadline\n. The link to a lab becomes visible to students after the start date (it's always visible to instructors). Students can submit until the due date without penalty or consuming grace days. Submission is turned off after the end date. Grades are included in the gradebook's category and course averages only after the grading deadline.\n\n\nHandins\n\n\nOnce an assessment is live (past the start date), students can begin submitting handins, where each handin is a single file, which can be either a text file or an archive file (e.g., \nmm.c\n, \nhandin.tar\n).\n\n\nPenalties and Extensions\n\n\nYou can set penalties for late handins, set hard limits on the number of handins, or set soft limits that penalize excessive handins on a sliding scale. You can also give a student an \nextension\n that\nextends the due dates and end dates for that student.\n\n\nGrace Days\n\n\nAutolab provides support for a late handin policy based on \ngrace days\n. Each\nstudent has a semester-long budget of grace days that are automatically applied if they handin after the due date.\nEach late day consumes one of the budgeted grace days. The Autolab system keeps track of the number of grace days that have been used by each student to date. If students run out of grace days and handin late, then there\nis a fixed late penalty (possibly zero) that can be set by the instructor.\n\n\nProblems\n\n\nEach lab contains at least one \nproblem\n, defined by the instructor, with some point value. Each problem has a name (e.g., \"Prob1\", \"Style\") that is unique for the lab (although different labs can have the same problem names).\n\n\nSubmissions\n\n\nOnce an assessment is live (past the start date), students can begin making submissions (handins),  where each submission is a single file.\n\n\nGrades\n\n\nGrades\n come in a number of different forms:\n\n\n\nProblem scores:\n These are scalar values (possibly negative) assigned per problem per submission, either manually by a human grader after the end date, or automatically by an autograder after each submission. Problem scores can also be uploaded (imported) in bulk from a CSV file. \n\n\nAssessment raw score:\n By default, the raw score is the sum of the individual problem scores, before \nany penalties are applied. You can override the default raw score calculation. See below.\n\n\n\nAssessment total score:\n The total score is the raw score, plus any late penalties, plus any instructor \ntweaks\n.\n\n\n\nCategory averages:\n This is the average for a particular student over all\nassessments in a specific instructor-defined category such as \"Labs, or \"Exams\".\nBy default the category average is the arithmetic mean of all assessment total scores, but it can be overwridden.\nSee below.\n\n\n\nCourse Average:\n By default, the course average is average of all category averages, but can be overidden.\nSee below.\n\n\n\n\n\n\nSubmissions can be\nclassified as one of three types: \"Normal\", \"No Grade\" or \"Excused\". A \"No\nGrade\" submission will show up in the gradebook as NG and a zero will be used\nwhen calculating averages. An \"Excused\" submission will show up in the\ngradebook as EXC and will not be used when calculating averages.\n\n\nOverriding Raw Score Calculations\n\n\nAutolab computes raw scores for a lab with a Ruby function called \nraw_score\n. The default is the sum of the individual problem scores. But you can change this by providing your own \nraw_score\n function in \nlabname\n.rb\n file. For example, to override the raw_score calculation for a lab called \nmalloclab\n, you might add the following \nraw_score\n function to \nmalloclab/malloclab.rb\n:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n  \n# In malloclab/malloclab.rb file\n\n  \ndef\n \nraw_score\n(\nscore\n)\n\n    \nperfindex\n \n=\n \nscore\n[\nAutograded Score\n].\nto_f\n()\n\n    \nheap\n \n=\n \nscore\n[\nHeap Checker\n].\nto_f\n()\n\n    \nstyle\n \n=\n \nscore\n[\nStyle\n].\nto_f\n()\n\n    \ndeduct\n \n=\n \nscore\n[\nCorrectnessDeductions\n].\nto_f\n()\n\n    \nperfpoints\n \n=\n \nperfindex\n\n\n    \n# perfindex below 50 gets autograded score of 0. \n\n    \nif\n \nperfindex\n \n \n50\n.\n0\n \nthen\n\n      \nperfpoints\n \n=\n \n0\n\n    \nelse\n\n      \nperfpoints\n \n=\n \nperfindex\n\n    \nend\n\n\n    \nreturn\n \nperfpoints\n \n+\n \nheap\n \n+\n \nstyle\n \n+\n \ndeduct\n\n  \nend\n\n\n\n\n\n\n\nThis particular lab has four problems called \"Autograded Score\",  \"Heap Checker\", \"Style\", and \"CorrectnessDeductions\". An \"Autograded Score\" less than 50 is set to zero when the raw score is calculated. \n\n\nNote: To make this change live, you must select the \"Reload config file\" option on the \nmalloclab\n page.\n\n\nOverriding Category and Course Averages\n\n\nThe average for a category \nfoo\n is calculated by a default Ruby function called \nfooAverage\n, which you can override in the \ncourse.rb\n file. For example, in our course, we prefer to report the \"average\" as the total number of normalized points (out of 100) that the student has accrued so far. This helps them understand where they stand in the class, e.g., \"Going into the final exam (worth 30 normalized points), I have 60 normalized points, so the only way to get an A is to get 100% on the final.\" Here's the Ruby function for category \"Lab\":\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n# In course.rb file\n\n\ndef\n \nLabAverage\n(\nuser\n)\n\n    \npts\n \n=\n \n(\nuser\n[\ndatalab\n].\nto_f\n()\n \n/\n \n63\n.\n0\n)\n \n*\n \n6\n.\n0\n \n+\n\n      \n(\nuser\n[\nbomblab\n].\nto_f\n()\n \n/\n \n70\n.\n0\n)\n \n*\n \n5\n.\n0\n \n+\n \n      \n(\nuser\n[\nattacklab\n].\nto_f\n()\n \n/\n \n100\n.\n0\n)\n \n*\n \n4\n.\n0\n \n+\n\n      \n(\nuser\n[\ncachelab\n].\nto_f\n()\n \n/\n \n60\n.\n0\n)\n \n*\n \n7\n.\n0\n \n+\n\n      \n(\nuser\n[\ntshlab\n].\nto_f\n()\n \n/\n \n110\n.\n0\n)\n \n*\n \n8\n.\n0\n \n+\n\n      \n(\nuser\n[\nmalloclab\n].\nto_f\n()\n \n/\n \n120\n.\n0\n)\n \n*\n \n12\n.\n0\n \n+\n\n      \n(\nuser\n[\nproxylab\n].\nto_f\n()\n \n/\n \n100\n.\n0\n)\n \n*\n \n8\n.\n0\n \n    \nreturn\n \npts\n.\nto_f\n()\n.\nround\n(\n2\n)\n\n\nend\n\n\n\n\n\n\n\nIn this case, labs are worth a total of 50/100 normalized points. The assessment called \ndatalab\n is graded out of a total of 63 points and is worth 6/50 normalized points.\n\n\nHere is the Ruby function for category \"Exam\":\n\n\n1\n2\n3\n4\n5\n6\n# In course.rb file\n\n\ndef\n \nExamAverage\n(\nuser\n)\n \n    \npts\n \n=\n \n((\nuser\n[\nmidterm\n].\nto_f\n()\n/\n60\n.\n0\n)\n \n*\n \n20\n.\n0\n)\n \n+\n\n          \n((\nuser\n[\nfinal\n].\nto_f\n()\n/\n80\n.\n0\n)\n*\n \n30\n.\n0\n)\n \n    \nreturn\n \npts\n.\nto_f\n()\n.\nround\n(\n2\n)\n \n\nend\n\n\n\n\n\n\n\nIn this case, exams are worth 50/100 normalized points. The assessment called \nmidterm\n is graded out of total of 60 points and is worth 20/50 normalized points.\n\n\nThe course average is computed by a default Ruby function called \ncourseAverage\n, which can be overridden by the \ncourse.rb\n file in the course directory. Here is the function for our running example:\n\n\n1\n2\n3\n4\n5\n# In course.rb file\n\n\ndef\n \ncourseAverage\n(\nuser\n)\n\n    \npts\n \n=\n \nuser\n[\ncatLab\n].\nto_f\n()\n \n+\n \nuser\n[\ncatExam\n].\nto_f\n()\n\n    \nreturn\n \npts\n.\nto_f\n()\n.\nround\n(\n2\n)\n\n\nend\n\n\n\n\n\n\n\nIn this course, the course average is the sum of the category averages for \"Lab\" and \"Exam\".\n\n\nNote: To make these changes live, you must select \"Reload course config file\" on the \"Manage course\" page.\n\n\nHandin History\n\n\nFor each lab, students can view all of their submissions, including any source code, and the problem scores, penalties, and total scores associated with those submissions, via the \nhandin history\n page.\n\n\nGradesheet\n\n\nThe \ngradesheet\n (not to be confused with the \ngradebook\n) is the workhorse grading tool. Each assessment has a separate gradesheet with the following features:\n\n\n\nProvides an interface for manually entering problem scores (and problem feedback) for the most recent submmission from each student. \n\n\nProvides an interface for viewing and annotating the submitted code.\n\n\nDisplays the problem scores for the most recent submission for each student, summarizes any late penalties, and computes the total score.\n\n\nProvides a link to each student's handin history.\n\n\n\n\nGradebook\n\n\nThe \ngradebook\n comes in two forms. The \nstudent gradebook\n displays the \ngrades for a particular student, including total scores for each assessment, category averages, and the course average. The \ninstructor gradebook\n is a table that displays the grades for the most recent submission of each student, including assessment total scores, category averages and course average. \n\n\nFor the gradebook calculations, submissions are \nclassified as one of three types: \"Normal\", \"No Grade\" or \"Excused\". A \"No\nGrade\" submission will show up in the gradebook as NG and a zero will be used\nwhen calculating averages. An \"Excused\" submission will show up in the\ngradebook as EXC and will not be used when calculating averages.\n\n\nReleasing Grades\n\n\nManually assigned grades are by default not released, and therefore not visible to\nstudents. You can release grades on an individual basis while grading, or\nrelease all available grades in bulk by using the \"Release all grades\" option. You can also reverse this\nprocess using the \"Withdraw all grades\" option. (The word \"withdraw\" is perhaps unfortunate. No grades are ever deleted. They are simply withdrawn from the student's view.)", 
            "title": "Guide for Instructors"
        }, 
        {
            "location": "/instructors/#instructors-guide", 
            "text": "This document provides instructors with a brief overview of the basic ideas and capabilities of the Autolab system. It's meant to be read from beginning to end the first time.", 
            "title": "Instructor's Guide"
        }, 
        {
            "location": "/instructors/#users", 
            "text": "Users  are either  instructors ,  course assistants , or  students . Instructors have full permissions. Course assistants are only allowed to enter grades. Students see only their own work. Each user is uniquely identified by their email address. You can change the permissions for a particular user at any time. Note that some instructors opt to give some or all of their TAs instructor status.", 
            "title": "Users"
        }, 
        {
            "location": "/instructors/#roster", 
            "text": "The  roster  holds the list of users. You can add and remove users one at a time, or in bulk by uploading a CSV file in the general Autolab format: \nSemester,email,last_name,first_name,school,major,year,grading_policy,courseNumber,courseLecture,section \nor in the format that is exported by the CMU S3 service: \n\"Semester\",\"Course\",\"Section\",\"Lecture\",\"Mini\",\"Last Name\",\"First Name\",\"MI\",\"AndrewID\",\"Email\",\"College\",\"Department\",...   Attention CMU Instructors:  S3 lists each student twice: once in a lecture roster, which lists the lecture number (e.g., 1, 2,...) in the section field, and once in a section roster, which lists the section letter (e.g., A, B,...) in the section field. Be careful not to import the lecture roster. Instead, export and upload each section individually. Or you can export everything from S3 with a single action, edit out the roster entries for the lecture(s), and then upload a single file to Autolab with all of the sections.   For the bulk upload, you can choose to either:     add  any new students in the roster file to the Autolab roster, or to     update  the Autolab roster by marking students missing from roster files as  dropped .    Instructors and course assistants are never marked as dropped. User accounts are never deleted. Students marked as dropped can still see their work, but cannot submit new work and do not appear on the instructor gradebook. Instructors can change the dropped status of a student at any time.   Once a student is added to the roster for a course, then that course becomes visible to the student when they visit the Autolab site. A student can be enrolled in an arbitrary number of Autolab courses.", 
            "title": "Roster"
        }, 
        {
            "location": "/instructors/#labs-assessments", 
            "text": "A  lab  (or  assessment ) \nis broadly defined as a submission set; it is anything that\nyour students make submissions (handins) for. This could be a programming assignment, a\ntyped homework, or even an in-class exam. You can create labs from scratch, or reuse them from previous semesters.\nSee the companion [[Guide for Lab Authors]] for info on writing and installing labs.", 
            "title": "Labs (Assessments)"
        }, 
        {
            "location": "/instructors/#assessment-categories", 
            "text": "You can tag each assessment with an arbitrary user-defined  category , e.g., \"Lab\", \"Exam\", \"Homework\".", 
            "title": "Assessment Categories"
        }, 
        {
            "location": "/instructors/#autograders-and-scoreboards", 
            "text": "Labs can be  autograded  or not, at your disrcretion. When a student submits to an autograded lab, Autolab runs an instructor-supplied  autograder  program that assigns scores to one or more problems associated with the lab. Autograded labs can have an optional  scoreboard  that shows (anonymized) results in real-time. See the companion [[Guide for Lab Authors]] for details on writing autograded labs with scoreboards.", 
            "title": "Autograders and Scoreboards"
        }, 
        {
            "location": "/instructors/#important-dates", 
            "text": "A lab has a  start date ,  due date ,  end date  and  grading deadline . The link to a lab becomes visible to students after the start date (it's always visible to instructors). Students can submit until the due date without penalty or consuming grace days. Submission is turned off after the end date. Grades are included in the gradebook's category and course averages only after the grading deadline.", 
            "title": "Important Dates"
        }, 
        {
            "location": "/instructors/#handins", 
            "text": "Once an assessment is live (past the start date), students can begin submitting handins, where each handin is a single file, which can be either a text file or an archive file (e.g.,  mm.c ,  handin.tar ).", 
            "title": "Handins"
        }, 
        {
            "location": "/instructors/#penalties-and-extensions", 
            "text": "You can set penalties for late handins, set hard limits on the number of handins, or set soft limits that penalize excessive handins on a sliding scale. You can also give a student an  extension  that\nextends the due dates and end dates for that student.", 
            "title": "Penalties and Extensions"
        }, 
        {
            "location": "/instructors/#grace-days", 
            "text": "Autolab provides support for a late handin policy based on  grace days . Each\nstudent has a semester-long budget of grace days that are automatically applied if they handin after the due date.\nEach late day consumes one of the budgeted grace days. The Autolab system keeps track of the number of grace days that have been used by each student to date. If students run out of grace days and handin late, then there\nis a fixed late penalty (possibly zero) that can be set by the instructor.", 
            "title": "Grace Days"
        }, 
        {
            "location": "/instructors/#problems", 
            "text": "Each lab contains at least one  problem , defined by the instructor, with some point value. Each problem has a name (e.g., \"Prob1\", \"Style\") that is unique for the lab (although different labs can have the same problem names).", 
            "title": "Problems"
        }, 
        {
            "location": "/instructors/#submissions", 
            "text": "Once an assessment is live (past the start date), students can begin making submissions (handins),  where each submission is a single file.", 
            "title": "Submissions"
        }, 
        {
            "location": "/instructors/#grades", 
            "text": "Grades  come in a number of different forms:  Problem scores:  These are scalar values (possibly negative) assigned per problem per submission, either manually by a human grader after the end date, or automatically by an autograder after each submission. Problem scores can also be uploaded (imported) in bulk from a CSV file.   Assessment raw score:  By default, the raw score is the sum of the individual problem scores, before \nany penalties are applied. You can override the default raw score calculation. See below.  Assessment total score:  The total score is the raw score, plus any late penalties, plus any instructor  tweaks .  Category averages:  This is the average for a particular student over all\nassessments in a specific instructor-defined category such as \"Labs, or \"Exams\".\nBy default the category average is the arithmetic mean of all assessment total scores, but it can be overwridden.\nSee below.  Course Average:  By default, the course average is average of all category averages, but can be overidden.\nSee below.   Submissions can be\nclassified as one of three types: \"Normal\", \"No Grade\" or \"Excused\". A \"No\nGrade\" submission will show up in the gradebook as NG and a zero will be used\nwhen calculating averages. An \"Excused\" submission will show up in the\ngradebook as EXC and will not be used when calculating averages.", 
            "title": "Grades"
        }, 
        {
            "location": "/instructors/#overriding-raw-score-calculations", 
            "text": "Autolab computes raw scores for a lab with a Ruby function called  raw_score . The default is the sum of the individual problem scores. But you can change this by providing your own  raw_score  function in  labname .rb  file. For example, to override the raw_score calculation for a lab called  malloclab , you might add the following  raw_score  function to  malloclab/malloclab.rb :   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17    # In malloclab/malloclab.rb file \n   def   raw_score ( score ) \n     perfindex   =   score [ Autograded Score ]. to_f () \n     heap   =   score [ Heap Checker ]. to_f () \n     style   =   score [ Style ]. to_f () \n     deduct   =   score [ CorrectnessDeductions ]. to_f () \n     perfpoints   =   perfindex \n\n     # perfindex below 50 gets autograded score of 0.  \n     if   perfindex     50 . 0   then \n       perfpoints   =   0 \n     else \n       perfpoints   =   perfindex \n     end \n\n     return   perfpoints   +   heap   +   style   +   deduct \n   end    This particular lab has four problems called \"Autograded Score\",  \"Heap Checker\", \"Style\", and \"CorrectnessDeductions\". An \"Autograded Score\" less than 50 is set to zero when the raw score is calculated.   Note: To make this change live, you must select the \"Reload config file\" option on the  malloclab  page.", 
            "title": "Overriding Raw Score Calculations"
        }, 
        {
            "location": "/instructors/#overriding-category-and-course-averages", 
            "text": "The average for a category  foo  is calculated by a default Ruby function called  fooAverage , which you can override in the  course.rb  file. For example, in our course, we prefer to report the \"average\" as the total number of normalized points (out of 100) that the student has accrued so far. This helps them understand where they stand in the class, e.g., \"Going into the final exam (worth 30 normalized points), I have 60 normalized points, so the only way to get an A is to get 100% on the final.\" Here's the Ruby function for category \"Lab\":   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 # In course.rb file  def   LabAverage ( user ) \n     pts   =   ( user [ datalab ]. to_f ()   /   63 . 0 )   *   6 . 0   + \n       ( user [ bomblab ]. to_f ()   /   70 . 0 )   *   5 . 0   +  \n       ( user [ attacklab ]. to_f ()   /   100 . 0 )   *   4 . 0   + \n       ( user [ cachelab ]. to_f ()   /   60 . 0 )   *   7 . 0   + \n       ( user [ tshlab ]. to_f ()   /   110 . 0 )   *   8 . 0   + \n       ( user [ malloclab ]. to_f ()   /   120 . 0 )   *   12 . 0   + \n       ( user [ proxylab ]. to_f ()   /   100 . 0 )   *   8 . 0  \n     return   pts . to_f () . round ( 2 )  end    In this case, labs are worth a total of 50/100 normalized points. The assessment called  datalab  is graded out of a total of 63 points and is worth 6/50 normalized points.  Here is the Ruby function for category \"Exam\":  1\n2\n3\n4\n5\n6 # In course.rb file  def   ExamAverage ( user )  \n     pts   =   (( user [ midterm ]. to_f () / 60 . 0 )   *   20 . 0 )   + \n           (( user [ final ]. to_f () / 80 . 0 ) *   30 . 0 )  \n     return   pts . to_f () . round ( 2 )   end    In this case, exams are worth 50/100 normalized points. The assessment called  midterm  is graded out of total of 60 points and is worth 20/50 normalized points.  The course average is computed by a default Ruby function called  courseAverage , which can be overridden by the  course.rb  file in the course directory. Here is the function for our running example:  1\n2\n3\n4\n5 # In course.rb file  def   courseAverage ( user ) \n     pts   =   user [ catLab ]. to_f ()   +   user [ catExam ]. to_f () \n     return   pts . to_f () . round ( 2 )  end    In this course, the course average is the sum of the category averages for \"Lab\" and \"Exam\".  Note: To make these changes live, you must select \"Reload course config file\" on the \"Manage course\" page.", 
            "title": "Overriding Category and Course Averages"
        }, 
        {
            "location": "/instructors/#handin-history", 
            "text": "For each lab, students can view all of their submissions, including any source code, and the problem scores, penalties, and total scores associated with those submissions, via the  handin history  page.", 
            "title": "Handin History"
        }, 
        {
            "location": "/instructors/#gradesheet", 
            "text": "The  gradesheet  (not to be confused with the  gradebook ) is the workhorse grading tool. Each assessment has a separate gradesheet with the following features:  Provides an interface for manually entering problem scores (and problem feedback) for the most recent submmission from each student.   Provides an interface for viewing and annotating the submitted code.  Displays the problem scores for the most recent submission for each student, summarizes any late penalties, and computes the total score.  Provides a link to each student's handin history.", 
            "title": "Gradesheet"
        }, 
        {
            "location": "/instructors/#gradebook", 
            "text": "The  gradebook  comes in two forms. The  student gradebook  displays the \ngrades for a particular student, including total scores for each assessment, category averages, and the course average. The  instructor gradebook  is a table that displays the grades for the most recent submission of each student, including assessment total scores, category averages and course average.   For the gradebook calculations, submissions are \nclassified as one of three types: \"Normal\", \"No Grade\" or \"Excused\". A \"No\nGrade\" submission will show up in the gradebook as NG and a zero will be used\nwhen calculating averages. An \"Excused\" submission will show up in the\ngradebook as EXC and will not be used when calculating averages.", 
            "title": "Gradebook"
        }, 
        {
            "location": "/instructors/#releasing-grades", 
            "text": "Manually assigned grades are by default not released, and therefore not visible to\nstudents. You can release grades on an individual basis while grading, or\nrelease all available grades in bulk by using the \"Release all grades\" option. You can also reverse this\nprocess using the \"Withdraw all grades\" option. (The word \"withdraw\" is perhaps unfortunate. No grades are ever deleted. They are simply withdrawn from the student's view.)", 
            "title": "Releasing Grades"
        }, 
        {
            "location": "/lab/", 
            "text": "This guide explains how to create autograded programming assignments (labs) for the Autolab system. \n\n\nWriting Autograders\n\n\nAn \nautograder\n is a program that takes a student's work as input, and generates some quantitative evaluation of that work as output. The student's work consists of one or more source files written in an arbitrary programming language. \nThe autograder processes these files and generates arbitrary text lines on stdout. The last text line on stdout must be a JSON string, called an \nautoresult\n, that assigns an autograded score to one or more problems, and optionally, generates the scoreboard entries for this submission.\n\n\nThe JSON autoresult is a \"scores\" hash that assigns a numerical score to one or more problems, and an optional \"scoreboard\" array that provides the scoreboard entries for this submission. For example, \n\n\n1\n{\nscores\n: {\nProb1\n: 10, \nProb2\n: 5}}\n\n\n\n\n\n\nassigns 10 points to \"Prob1\" and 5 points to \"Prob2\" for this submission. The names of the problems must exactly match the names of the problems for this lab on the Autolab web site. Not all problems need to be autograded. For example, there might be a problem for this assessment called \"Style\" that you grade manually after the due date. \n\n\nIf you used the Autolab web site to configure a scoreboard for this lab with three columns called \"Prob1\", \"Prob2\", and \"Total\", then the autoresult might be: \n\n\n1\n{\nscores\n: {\nProb1\n: 10, \nProb2\n: 5}, \nscoreboard\n: [10, 5, 15]}\n\n\n\n\n\n\nBy convention, an autograder accepts an optional \n-A\n command line argument that tells it to emit the JSON autoresult. So if you run the autograder outside of the context of Autolab, you can suppress the autoresult line by calling the autograder without the \n-A\n argument.\n\n\nOne of the nice properties of Autolab autograders is that they can be written and tested offline, without requiring any interaction with Autolab. Writing autograders is not easy, but the fact that they can be developed offline allows you to develop and test them in your own familiar computing environment. \n\n\nInstalling Autograded Labs\n\n\nAfter you've written and tested the autograder, you then use the Autolab web site to create the autograded lab. Autolab supports creating new labs from scratch, or reusing labs from previous semesters. We'll describe each of these in turn.\n\n\nCreating an Autograded Lab from Scratch\n\n\nStep 1: Create the new lab.\n\n\nCreate a new lab by clicking the \"Install Assessment\" button and choosing \"Option 1: Create a New Assessment from Scratch.\" For course \ncourse\n and lab \nlab\n,  this will create a \nlab directory\n in the Autolab file hierarchy called \ncourses/\ncourse\n/\nlab\n. This initial directory contains a couple of config files and a directory called \nlab\n/handin\n that will contain all of the student handin files. In general, you should never modify any of these. \n\n\n\n\nAttention CMU Lab Authors\n\n\nAt CMU, the lab directory is called \n/afs/cs/academic/class/\ncourse\n/autolab/\nlab\n. For example: \n/afs/cs/academic/class/15213-f16/autolab/foo\n is the lab directory for the lab named \nfoo\n for the Fall 2016 instance of 15-213. All lab-related files must go in this \nautolab\n directory to avoid permissions issues.\n\n\n\n\nStep 2: Configure the lab for autograding.\n\n\nUsing the \"Edit Assessment\" page, turn on autograding for this lab by selecting \"Add Autograder.\" You will be asked for the name of the image to be used for autograding this lab. The default image distributed with Autolab is an Ubuntu image called \nautograding_image\n. If your class needs different software, then you or your facilities staff will need to update the default image or create a new one. \n\n\n\n\nAttention CMU Lab Authors\n\n\nThe default autograding image at CMU is called \nrhel.img\n and is a copy of the software on the CMU Andrew machines (\nlinux.andrew.cmu.edu\n). If you need custom software installed, please send mail to autolab-help@andrew.cmu.edu.\n\n\n\n\nIf you want a scoreboard, you should select \"Add Scoreboard,\" which will allow you to specify the number of columns and their names. The \"Add Scoreboard\" page contains a tutorial on how to do this. \n\n\nYou'll also need to define the names and point values for all the problems in this lab, including the autograded ones. \n\n\nEach student submission is a single file, either a text source file or an archive file containing multiple files and directories. You'll need to specify the \nbase name\n for the student submission files (e.g., \nmm.c\n, \nhandin.tar\n).\n\n\nStep 3: Add the required autograding files.\n\n\nFor an autograded lab, Autolab expects the following two \nautograding files\n in the lab directory: \n\n\n\n\nautograde-Makefile\n: runs the autograder on a student submission.\n\n\nautograde.tar\n: contains all of the files (except for the student handin file) that are needed for autograding. \n\n\n\n\nEach time a student submits their work or an instructor requests a regrade, Autolab \n\n\n\n\ncopies the student handin file, along with the two autograding files, to an empty directory on an \nautograding instance\n, \n\n\nrenames the student handin file to \nbase name\n (e.g., hello.c, handin.tar), \n\n\nrenames \nautograde-Makefile\n to \nMakefile\n, \n\n\nexecutes the command \nmake\n on the autograding instance, and finally \n\n\ncaptures the stdout generated by the autograder, and parses the resulting JSON autoresult to determine the autograded scores. \n\n\n\n\nImporting an Autograded Lab from a Previous Semester\n\n\nIf you've created a lab for a course in a previous semester and have access to the lab directory (as we do at CMU via AFS), you can import the lab into your current course by \n\n\n\n\ncopying the lab directory from the previous course to the current course, \n\n\ncleaning out the \nhandin\n directory, then \n\n\nvisiting the \"Install Assessment\" page and selecting \"Option 2: Import an existing assessment from the file system.\" Autolab will give you a list of all of the directories that appear to be uninstalled labs, from which you can select your particular lab. \n\n\n\n\nIf you don't have access to the lab directory, another option is to import a lab from a tarball that was created by running \"Export assessment\" in an instance of a lab from a previous semester. Visit the \"Install Assessment\" page and select \"Option 3: Import an existing assessment from tarball.\" This will upload the tarball, create a new lab directory by expanding the tarball, and then import the directory.\n\n\nExample: Hello Lab\n\n\nIn this section we'll look at the simplest possible autograded lab we could imagine, called, appropriately enough, the\n\nHello Lab\n \n(with \ntarball\n), which is stored in a lab directory called \nhello\n in the Autolab github repo. While it's trivial, it illustrates all of the aspects of developing an autograded lab, and provides a simple example that you can use for sanity testing on your Autolab installation.\n\n\nIn this lab, students are asked to write a version of the K\nR \"hello, world\" program, called \nhello.c\n. The autograder simply checks that the submitted \nhello.c\n program compiles and runs with an exit status of zero. If so, the submission gets 100 points. Otherwise it gets 0 points. \n\n\nDirectory Structure\n\n\nAutolab expects to find the \nautograde-Makefile\nand \nautograde.tar\n files in the \nhello\n lab directory, but otherwise places no constraints on the contents and organization of this directory. However, based on our experience, we strongly recommend a directory structure with the following form:\n\n\nhello/README\n:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n# Basic files created by the lab author\nMakefile                Builds the lab from src/\nREADME                  \nautograde-Makefile      Makefile that runs the autograder \nsrc/                    Contains all src files and solutions         \ntest-autograder/        For testing autograder offline\nwriteup/                Lab writeup that students view from Autolab    \n\n# Files created by running make\nhello-handout/          The directory that is handed out to students, created\n                        using files from src/. \nhello-handout.tar       Archive of hello-handout directory\nautograde.tar           File that is copied to the autograding instance \n                        (along with autograde-Makefile and student handin file)\n\n# Files created and managed by Autolab\nhandin/    All students handin files\nhello.rb   Config file\nhello.yml  Database properties that persist from semester to semester\nlog.txt    Log of autograded submissions\n\n\n\n\n\n\nThe key idea with this directory structure is to place \nall\n code for the lab in the \nsrc\n directory, including the autograding code and any starter code handed out to students in the handout directory (\nhello-handout.tar\n in this example). Keeping all hard state in the \nsrc\n directory helps limit inconsistencies. \n\n\nThe main makefile creates \nhello-handout\n by copying files from \nsrc\n, and then tars it up:\n\n\nhello/Makefile\n:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n#\n\n\n# Makefile to manage the example Hello Lab\n\n\n#\n\n\n\n# Get the name of the lab directory\n\n\nLAB\n \n=\n \n$(\nnotdir \n$(\nPWD\n))\n\n\n\nall\n:\n \nhandout\n \nhandout\n-\ntarfile\n\n\n\nhandout\n:\n \n\n    # Rebuild the handout directory that students download\n\n    \n(\nrm -rf \n$(\nLAB\n)\n-handout\n;\n mkdir \n$(\nLAB\n)\n-handout\n)\n\n    cp -p src/Makefile-handout \n$(\nLAB\n)\n-handout/Makefile\n    cp -p src/README-handout \n$(\nLAB\n)\n-handout/README\n    cp -p src/hello.c-handout \n$(\nLAB\n)\n-handout/hello.c \n    cp -p src/driver.sh \n$(\nLAB\n)\n-handout\n\n\nhandout-tarfile\n:\n \nhandout\n\n\n    # Build *-handout.tar and autograde.tar\n\n    tar cvf \n$(\nLAB\n)\n-handout.tar \n$(\nLAB\n)\n-handout\n    cp -p \n$(\nLAB\n)\n-handout.tar autograde.tar\n\n\nclean\n:\n\n\n    # Clean the entire lab directory tree.  Note that you can run\n\n\n    # \nmake clean; make\n at any time while the lab is live with no\n\n\n    # adverse effects.\n\n    rm -f *~ *.tar\n    \n(\ncd\n src\n;\n make clean\n)\n\n    \n(\ncd\n test-autograder\n;\n make clean\n)\n\n    rm -rf \n$(\nLAB\n)\n-handout\n    rm -f autograde.tar\n\n#\n\n\n# CAREFULL!!! This will delete all student records in the logfile and\n\n\n# in the handin directory. Don\nt run this once the lab has started.\n\n\n# Use it to clean the directory when you are starting a new version\n\n\n# of the lab from scratch, or when you are debugging the lab prior\n\n\n# to releasing it to the students.\n\n\n#\n\n\ncleanallfiles\n:\n\n\n    # Reset the lab from scratch.\n\n    make clean\n    rm -f log.txt\n    rm -rf handin/*\n\n\n\n\n\n\nFilenames are disambiguated by appending \n-handout\n, which is stripped when they are copied to the handout directory. For example, \nsrc/hello.c\n is the instructor's solution file, and \nsrc/hello.c-handout\n is the starter code that is given to the students in \nhello-handout/hello.c\n. And \nsrc/README\n is the README for the src directory and \nsrc/README-handout\n is the README that is handed out to students in \nhello-handout/README\n.\n\n\nTo build the lab, type \nmake clean; make\n. You can do this as often as you like while the lab is live with no adverse effects. However, be careful to never type \nmake cleanallfiles\n while the lab is live; this should only be done before the lab goes live; never during or after.\n\n\nSource Directory\n\n\nThe \nhello/src/\n directory \ncontains \nall\n of the code files for the Hello Lab, including the files that are handed out to students:\n\n\nhello/src/README\n:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n# Autograder and solution files\nMakefile                Makefile and ...\nREADME                  ... README for this directory\ndriver.sh*              Autograder\nhello.c                 Solution hello.c file\n\n# Files that are handed out to students\nMakefile-handout        Makefile and ...\nREADME-handout          ... README handed out to students\nhello.c-handout         Blank hello.c file handed out to students\n\n\n\n\n\n\nHandout Directory\n\n\nThe \nhello/hello-handout/\n directory\ncontains the files that the students will use to work on the lab. It contains no hard state, and is populated entirely with files from \nhello/src\n:\n\n\nhello/hello-handout/README\n:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\nFor\n \nthis\n \nlab\n,\n \nyou\n \nshould\n \nwrite\n \na\n \ntiny\n \nC\n \nprogram\n,\n \ncalled\n \nhello.c\n,\n\n\nthat\n \nprints\n \nhello, world\n \nto\n \nstdout\n \nand\n \nthen\n \nindicates\n \nsuccess\n \nby\n\n\nexiting\n \nwith\n \na\n \nstatus\n \nof\n \nzero\n.\n\n\n\nTo\n \ntest\n \nyour\n \nwork\n:\n \n\n$\n \nmake\n \nclean\n;\n \nmake\n;\n \n./\nhello\n\n\n\nTo\n \nrun\n \nthe\n \nsame\n \nautograder\n \nthat\n \nAutolab\n \nwill\n \nuse\n \nwhen\n \nyou\n \nsubmit\n:\n\n\n$\n \n./\ndriver\n.\nsh\n\n\n\nFiles\n:\n\n\nREADME\n          \nThis\n \nfile\n\n\nMakefile\n        \nCompiles\n \nhello\n.\nc\n\n\ndriver\n.\nsh\n       \nAutolab\n \nautograder\n\n\nhello\n.\nc\n         \nEmpty\n \nC\n \nfile\n \nthat\n \nyou\n \nwill\n \nedit\n\n\n\n\n\n\n\nhello/hello-handout/Makefile\n contains the rules that compile the student source code:\n\n\n1\n2\n3\n4\n5\n6\n# Student makefile for the Hello Lab\n\nall: \n    gcc hello.c -o hello\n\nclean:\n    rm -rf *~ hello\n\n\n\n\n\n\nTo compile and run their code, students type:\n\n\n1\n2\n$\n \nmake\n \nclean\n;\n \nmake\n\n\n$\n \n./\nhello\n\n\n\n\n\n\n\nAutograder\n\n\nThe autograder for the Hello Lab is a trivially simple bash script called \ndriver.sh\n that compiles and runs \nhello.c\n and verifies that it returns with an exit status of zero:\n\n\nhello/src/driver.sh\n \n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n#!/bin/bash\n\n\n\n# driver.sh - The simplest autograder we could think of. It checks\n\n\n#   that students can write a C program that compiles, and then\n\n\n#   executes with an exit status of zero.\n\n\n#   Usage: ./driver.sh\n\n\n\n# Compile the code\n\n\necho\n \nCompiling hello.c\n\n\n(\nmake clean\n;\n make\n)\n\n\nstatus\n=\n$?\n\n\nif\n \n[\n \n${\nstatus\n}\n -ne \n0\n \n]\n;\n \nthen\n\n    \necho\n \nFailure: Unable to compile hello.c (return status = \n${\nstatus\n}\n)\n\n    \necho\n \n{\\\nscores\\\n: {\\\nCorrectness\\\n: 0}}\n\n    \nexit\n\n\nfi\n\n\n\n# Run the code\n\n\necho\n \nRunning ./hello\n\n./hello\n\nstatus\n=\n$?\n\n\nif\n \n[\n \n${\nstatus\n}\n -eq \n0\n \n]\n;\n \nthen\n\n    \necho\n \nSuccess: ./hello runs with an exit status of 0\n\n    \necho\n \n{\\\nscores\\\n: {\\\nCorrectness\\\n: 100}}\n\n\nelse\n\n    \necho\n \nFailure: ./hello fails or returns nonzero exit status of \n${\nstatus\n}\n\n    \necho\n \n{\\\nscores\\\n: {\\\nCorrectness\\\n: 0}}\n\n\nfi\n\n\n\nexit\n\n\n\n\n\n\n\nFor example:\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n$\n \n./\ndriver\n.\nsh\n\n\n# Compiling hello.c\n\n\n# rm -rf *~ hello\n\n\n# gcc hello.c -o hello\n\n\n# Running ./hello\n\n\n# Hello, world\n\n\n# Success: ./hello runs with an exit status of 0\n\n\n# {\nscores\n: {\nCorrectness\n: 100}}\n\n\n\n\n\n\n\nNotice that the autograder expects the \nhello\n lab on the Autolab front-end to have been defined with a problem called \"Correctness\", with a maximum value of 100 points. If you forget to define the problems listed in the JSON autoresult, scores will still be logged, but they won't be posted to the database. \n\n\nRequired Autograding Files\n\n\nAutolab requires two \nautograding files\n called \nautograde.tar\n, which contains all of the code required by the autograder, and \nautograde-Makefile\n, which runs the autograder on the autograding image when each submission is graded.\n\n\nFor the Hello Lab, \nautograde.tar\n is simply a copy of the \nhello-handout.tar\n file that is handed out to students. And here is the corresponding \n\nhello/autograde-makefile\n:\n\n\n1\n2\n3\n4\n5\n6\n7\nall\n:\n\n    \ntar\n \nxvf\n \nautograde\n.\ntar\n\n    \ncp\n \nhello\n.\nc\n \nhello\n-\nhandout\n\n    \n(\ncd\n \nhello\n-\nhandout\n;\n \n./\ndriver\n.\nsh\n)\n\n\n\nclean\n:\n\n    \nrm\n \n-\nrf\n \n*~\n \nhello\n-\nhandout\n\n\n\n\n\n\n\nThe makefile expands \nautograde.tar\n into \nhello-handout\n, copies \nhello.c\n (the submission file) into \nhello-handout\n, changes directory to \nhello-handout\n, builds the autograder, and then runs it. \n\n\nTest Directory\n\n\nFor our labs, we like to setup a test directory (called \ntest-autograder\n in this example), that allows us to test our \nautograde-Makefile\n and \nautograde-tar\n files by simulating Autolab's behavior on the autograding instance. The \ntest-autograder\n directory has the following form:\n\n\n1\n2\n3\n4\n5\n6\n$\n \ncd\n \ntest\n-\nautograder\n\n\n$\n \nls\n \n-\nl\n\n\n# total 3\n\n\n# lrwxr-xr-x 1 droh users  21 Aug  4 16:43 Makefile -\n ../autograde-Makefile\n\n\n# lrwxr-xr-x 1 droh users  16 Aug  4 16:43 autograde.tar -\n ../autograde.tar\n\n\n# -rw-rw-r-- 1 droh users 113 Aug  4 16:44 hello.c\n\n\n\n\n\n\n\nTo simulate Autolab's behavior on an autograding instance:\n\n\n1\n2\n3\n4\n5\n$\n \ncd\n \ntest\n-\nautograder\n \n \nmake\n \nclean\n \n \nmake\n\n\n# Running ./hello\n\n\n# Hello, world\n\n\n# Success: ./hello runs with an exit status of 0\n\n\n# {\nscores\n: {\nCorrectness\n: 100}}\n\n\n\n\n\n\n\nWriteup directory\n\n\nThe \nhello/writeup\n contains the detailed lab writeup, either html or pdf file, that students can download from the Autolab front end.", 
            "title": "Guide for Lab Authors"
        }, 
        {
            "location": "/lab/#writing-autograders", 
            "text": "An  autograder  is a program that takes a student's work as input, and generates some quantitative evaluation of that work as output. The student's work consists of one or more source files written in an arbitrary programming language. \nThe autograder processes these files and generates arbitrary text lines on stdout. The last text line on stdout must be a JSON string, called an  autoresult , that assigns an autograded score to one or more problems, and optionally, generates the scoreboard entries for this submission.  The JSON autoresult is a \"scores\" hash that assigns a numerical score to one or more problems, and an optional \"scoreboard\" array that provides the scoreboard entries for this submission. For example,   1 { scores : { Prob1 : 10,  Prob2 : 5}}   assigns 10 points to \"Prob1\" and 5 points to \"Prob2\" for this submission. The names of the problems must exactly match the names of the problems for this lab on the Autolab web site. Not all problems need to be autograded. For example, there might be a problem for this assessment called \"Style\" that you grade manually after the due date.   If you used the Autolab web site to configure a scoreboard for this lab with three columns called \"Prob1\", \"Prob2\", and \"Total\", then the autoresult might be:   1 { scores : { Prob1 : 10,  Prob2 : 5},  scoreboard : [10, 5, 15]}   By convention, an autograder accepts an optional  -A  command line argument that tells it to emit the JSON autoresult. So if you run the autograder outside of the context of Autolab, you can suppress the autoresult line by calling the autograder without the  -A  argument.  One of the nice properties of Autolab autograders is that they can be written and tested offline, without requiring any interaction with Autolab. Writing autograders is not easy, but the fact that they can be developed offline allows you to develop and test them in your own familiar computing environment.", 
            "title": "Writing Autograders"
        }, 
        {
            "location": "/lab/#installing-autograded-labs", 
            "text": "After you've written and tested the autograder, you then use the Autolab web site to create the autograded lab. Autolab supports creating new labs from scratch, or reusing labs from previous semesters. We'll describe each of these in turn.", 
            "title": "Installing Autograded Labs"
        }, 
        {
            "location": "/lab/#creating-an-autograded-lab-from-scratch", 
            "text": "", 
            "title": "Creating an Autograded Lab from Scratch"
        }, 
        {
            "location": "/lab/#step-1-create-the-new-lab", 
            "text": "Create a new lab by clicking the \"Install Assessment\" button and choosing \"Option 1: Create a New Assessment from Scratch.\" For course  course  and lab  lab ,  this will create a  lab directory  in the Autolab file hierarchy called  courses/ course / lab . This initial directory contains a couple of config files and a directory called  lab /handin  that will contain all of the student handin files. In general, you should never modify any of these.    Attention CMU Lab Authors  At CMU, the lab directory is called  /afs/cs/academic/class/ course /autolab/ lab . For example:  /afs/cs/academic/class/15213-f16/autolab/foo  is the lab directory for the lab named  foo  for the Fall 2016 instance of 15-213. All lab-related files must go in this  autolab  directory to avoid permissions issues.", 
            "title": "Step 1: Create the new lab."
        }, 
        {
            "location": "/lab/#step-2-configure-the-lab-for-autograding", 
            "text": "Using the \"Edit Assessment\" page, turn on autograding for this lab by selecting \"Add Autograder.\" You will be asked for the name of the image to be used for autograding this lab. The default image distributed with Autolab is an Ubuntu image called  autograding_image . If your class needs different software, then you or your facilities staff will need to update the default image or create a new one.    Attention CMU Lab Authors  The default autograding image at CMU is called  rhel.img  and is a copy of the software on the CMU Andrew machines ( linux.andrew.cmu.edu ). If you need custom software installed, please send mail to autolab-help@andrew.cmu.edu.   If you want a scoreboard, you should select \"Add Scoreboard,\" which will allow you to specify the number of columns and their names. The \"Add Scoreboard\" page contains a tutorial on how to do this.   You'll also need to define the names and point values for all the problems in this lab, including the autograded ones.   Each student submission is a single file, either a text source file or an archive file containing multiple files and directories. You'll need to specify the  base name  for the student submission files (e.g.,  mm.c ,  handin.tar ).", 
            "title": "Step 2: Configure the lab for autograding."
        }, 
        {
            "location": "/lab/#step-3-add-the-required-autograding-files", 
            "text": "For an autograded lab, Autolab expects the following two  autograding files  in the lab directory:    autograde-Makefile : runs the autograder on a student submission.  autograde.tar : contains all of the files (except for the student handin file) that are needed for autograding.    Each time a student submits their work or an instructor requests a regrade, Autolab    copies the student handin file, along with the two autograding files, to an empty directory on an  autograding instance ,   renames the student handin file to  base name  (e.g., hello.c, handin.tar),   renames  autograde-Makefile  to  Makefile ,   executes the command  make  on the autograding instance, and finally   captures the stdout generated by the autograder, and parses the resulting JSON autoresult to determine the autograded scores.", 
            "title": "Step 3: Add the required autograding files."
        }, 
        {
            "location": "/lab/#importing-an-autograded-lab-from-a-previous-semester", 
            "text": "If you've created a lab for a course in a previous semester and have access to the lab directory (as we do at CMU via AFS), you can import the lab into your current course by    copying the lab directory from the previous course to the current course,   cleaning out the  handin  directory, then   visiting the \"Install Assessment\" page and selecting \"Option 2: Import an existing assessment from the file system.\" Autolab will give you a list of all of the directories that appear to be uninstalled labs, from which you can select your particular lab.    If you don't have access to the lab directory, another option is to import a lab from a tarball that was created by running \"Export assessment\" in an instance of a lab from a previous semester. Visit the \"Install Assessment\" page and select \"Option 3: Import an existing assessment from tarball.\" This will upload the tarball, create a new lab directory by expanding the tarball, and then import the directory.", 
            "title": "Importing an Autograded Lab from a Previous Semester"
        }, 
        {
            "location": "/lab/#example-hello-lab", 
            "text": "In this section we'll look at the simplest possible autograded lab we could imagine, called, appropriately enough, the Hello Lab  \n(with  tarball ), which is stored in a lab directory called  hello  in the Autolab github repo. While it's trivial, it illustrates all of the aspects of developing an autograded lab, and provides a simple example that you can use for sanity testing on your Autolab installation.  In this lab, students are asked to write a version of the K R \"hello, world\" program, called  hello.c . The autograder simply checks that the submitted  hello.c  program compiles and runs with an exit status of zero. If so, the submission gets 100 points. Otherwise it gets 0 points.", 
            "title": "Example: Hello Lab"
        }, 
        {
            "location": "/lab/#directory-structure", 
            "text": "Autolab expects to find the  autograde-Makefile and  autograde.tar  files in the  hello  lab directory, but otherwise places no constraints on the contents and organization of this directory. However, based on our experience, we strongly recommend a directory structure with the following form:  hello/README :   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20 # Basic files created by the lab author\nMakefile                Builds the lab from src/\nREADME                  \nautograde-Makefile      Makefile that runs the autograder \nsrc/                    Contains all src files and solutions         \ntest-autograder/        For testing autograder offline\nwriteup/                Lab writeup that students view from Autolab    \n\n# Files created by running make\nhello-handout/          The directory that is handed out to students, created\n                        using files from src/. \nhello-handout.tar       Archive of hello-handout directory\nautograde.tar           File that is copied to the autograding instance \n                        (along with autograde-Makefile and student handin file)\n\n# Files created and managed by Autolab\nhandin/    All students handin files\nhello.rb   Config file\nhello.yml  Database properties that persist from semester to semester\nlog.txt    Log of autograded submissions   The key idea with this directory structure is to place  all  code for the lab in the  src  directory, including the autograding code and any starter code handed out to students in the handout directory ( hello-handout.tar  in this example). Keeping all hard state in the  src  directory helps limit inconsistencies.   The main makefile creates  hello-handout  by copying files from  src , and then tars it up:  hello/Makefile :   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43 #  # Makefile to manage the example Hello Lab  #  # Get the name of the lab directory  LAB   =   $( notdir  $( PWD ))  all :   handout   handout - tarfile  handout :       # Rebuild the handout directory that students download \n     ( rm -rf  $( LAB ) -handout ;  mkdir  $( LAB ) -handout ) \n    cp -p src/Makefile-handout  $( LAB ) -handout/Makefile\n    cp -p src/README-handout  $( LAB ) -handout/README\n    cp -p src/hello.c-handout  $( LAB ) -handout/hello.c \n    cp -p src/driver.sh  $( LAB ) -handout handout-tarfile :   handout      # Build *-handout.tar and autograde.tar \n    tar cvf  $( LAB ) -handout.tar  $( LAB ) -handout\n    cp -p  $( LAB ) -handout.tar autograde.tar clean :      # Clean the entire lab directory tree.  Note that you can run      #  make clean; make  at any time while the lab is live with no      # adverse effects. \n    rm -f *~ *.tar\n     ( cd  src ;  make clean ) \n     ( cd  test-autograder ;  make clean ) \n    rm -rf  $( LAB ) -handout\n    rm -f autograde.tar #  # CAREFULL!!! This will delete all student records in the logfile and  # in the handin directory. Don t run this once the lab has started.  # Use it to clean the directory when you are starting a new version  # of the lab from scratch, or when you are debugging the lab prior  # to releasing it to the students.  #  cleanallfiles :      # Reset the lab from scratch. \n    make clean\n    rm -f log.txt\n    rm -rf handin/*   Filenames are disambiguated by appending  -handout , which is stripped when they are copied to the handout directory. For example,  src/hello.c  is the instructor's solution file, and  src/hello.c-handout  is the starter code that is given to the students in  hello-handout/hello.c . And  src/README  is the README for the src directory and  src/README-handout  is the README that is handed out to students in  hello-handout/README .  To build the lab, type  make clean; make . You can do this as often as you like while the lab is live with no adverse effects. However, be careful to never type  make cleanallfiles  while the lab is live; this should only be done before the lab goes live; never during or after.", 
            "title": "Directory Structure"
        }, 
        {
            "location": "/lab/#source-directory", 
            "text": "The  hello/src/  directory \ncontains  all  of the code files for the Hello Lab, including the files that are handed out to students:  hello/src/README :   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 # Autograder and solution files\nMakefile                Makefile and ...\nREADME                  ... README for this directory\ndriver.sh*              Autograder\nhello.c                 Solution hello.c file\n\n# Files that are handed out to students\nMakefile-handout        Makefile and ...\nREADME-handout          ... README handed out to students\nhello.c-handout         Blank hello.c file handed out to students", 
            "title": "Source Directory"
        }, 
        {
            "location": "/lab/#handout-directory", 
            "text": "The  hello/hello-handout/  directory\ncontains the files that the students will use to work on the lab. It contains no hard state, and is populated entirely with files from  hello/src :  hello/hello-handout/README :   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15 For   this   lab ,   you   should   write   a   tiny   C   program ,   called   hello.c ,  that   prints   hello, world   to   stdout   and   then   indicates   success   by  exiting   with   a   status   of   zero .  To   test   your   work :   $   make   clean ;   make ;   ./ hello  To   run   the   same   autograder   that   Autolab   will   use   when   you   submit :  $   ./ driver . sh  Files :  README            This   file  Makefile          Compiles   hello . c  driver . sh         Autolab   autograder  hello . c           Empty   C   file   that   you   will   edit    hello/hello-handout/Makefile  contains the rules that compile the student source code:  1\n2\n3\n4\n5\n6 # Student makefile for the Hello Lab \nall: \n    gcc hello.c -o hello\n\nclean:\n    rm -rf *~ hello   To compile and run their code, students type:  1\n2 $   make   clean ;   make  $   ./ hello", 
            "title": "Handout Directory"
        }, 
        {
            "location": "/lab/#autograder", 
            "text": "The autograder for the Hello Lab is a trivially simple bash script called  driver.sh  that compiles and runs  hello.c  and verifies that it returns with an exit status of zero:  hello/src/driver.sh     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30 #!/bin/bash  # driver.sh - The simplest autograder we could think of. It checks  #   that students can write a C program that compiles, and then  #   executes with an exit status of zero.  #   Usage: ./driver.sh  # Compile the code  echo   Compiling hello.c  ( make clean ;  make )  status = $?  if   [   ${ status }  -ne  0   ] ;   then \n     echo   Failure: Unable to compile hello.c (return status =  ${ status } ) \n     echo   {\\ scores\\ : {\\ Correctness\\ : 0}} \n     exit  fi  # Run the code  echo   Running ./hello \n./hello status = $?  if   [   ${ status }  -eq  0   ] ;   then \n     echo   Success: ./hello runs with an exit status of 0 \n     echo   {\\ scores\\ : {\\ Correctness\\ : 100}}  else \n     echo   Failure: ./hello fails or returns nonzero exit status of  ${ status } \n     echo   {\\ scores\\ : {\\ Correctness\\ : 0}}  fi  exit    For example:  1\n2\n3\n4\n5\n6\n7\n8 $   ./ driver . sh  # Compiling hello.c  # rm -rf *~ hello  # gcc hello.c -o hello  # Running ./hello  # Hello, world  # Success: ./hello runs with an exit status of 0  # { scores : { Correctness : 100}}    Notice that the autograder expects the  hello  lab on the Autolab front-end to have been defined with a problem called \"Correctness\", with a maximum value of 100 points. If you forget to define the problems listed in the JSON autoresult, scores will still be logged, but they won't be posted to the database.", 
            "title": "Autograder"
        }, 
        {
            "location": "/lab/#required-autograding-files", 
            "text": "Autolab requires two  autograding files  called  autograde.tar , which contains all of the code required by the autograder, and  autograde-Makefile , which runs the autograder on the autograding image when each submission is graded.  For the Hello Lab,  autograde.tar  is simply a copy of the  hello-handout.tar  file that is handed out to students. And here is the corresponding  hello/autograde-makefile :  1\n2\n3\n4\n5\n6\n7 all : \n     tar   xvf   autograde . tar \n     cp   hello . c   hello - handout \n     ( cd   hello - handout ;   ./ driver . sh )  clean : \n     rm   - rf   *~   hello - handout    The makefile expands  autograde.tar  into  hello-handout , copies  hello.c  (the submission file) into  hello-handout , changes directory to  hello-handout , builds the autograder, and then runs it.", 
            "title": "Required Autograding Files"
        }, 
        {
            "location": "/lab/#test-directory", 
            "text": "For our labs, we like to setup a test directory (called  test-autograder  in this example), that allows us to test our  autograde-Makefile  and  autograde-tar  files by simulating Autolab's behavior on the autograding instance. The  test-autograder  directory has the following form:  1\n2\n3\n4\n5\n6 $   cd   test - autograder  $   ls   - l  # total 3  # lrwxr-xr-x 1 droh users  21 Aug  4 16:43 Makefile -  ../autograde-Makefile  # lrwxr-xr-x 1 droh users  16 Aug  4 16:43 autograde.tar -  ../autograde.tar  # -rw-rw-r-- 1 droh users 113 Aug  4 16:44 hello.c    To simulate Autolab's behavior on an autograding instance:  1\n2\n3\n4\n5 $   cd   test - autograder     make   clean     make  # Running ./hello  # Hello, world  # Success: ./hello runs with an exit status of 0  # { scores : { Correctness : 100}}", 
            "title": "Test Directory"
        }, 
        {
            "location": "/lab/#writeup-directory", 
            "text": "The  hello/writeup  contains the detailed lab writeup, either html or pdf file, that students can download from the Autolab front end.", 
            "title": "Writeup directory"
        }, 
        {
            "location": "/tango/", 
            "text": "Autolab + Tango OneClick Installation\n\n\nOneClick is the fastest way to install Autolab and Tango on an Ubuntu VM. The installation uses packages Autolab, MySQL, and Tango into seperate Docker containers with specific exposed ports for communication.", 
            "title": "Getting Started"
        }, 
        {
            "location": "/tango/#autolab-tango-oneclick-installation", 
            "text": "OneClick is the fastest way to install Autolab and Tango on an Ubuntu VM. The installation uses packages Autolab, MySQL, and Tango into seperate Docker containers with specific exposed ports for communication.", 
            "title": "Autolab + Tango OneClick Installation"
        }, 
        {
            "location": "/tango-cli/", 
            "text": "Tango Command Line Client\n\n\nThis is a guide to use the command-line client (\nclients/tango-cli.py\n) to test and collect other valuable information from Tango. Please \nsetup Tango\n before moving forward. This guide assumes an instance of Tango is already up and running.\n\n\nRunning a Sample Job\n\n\nThe CLI supports two ways to run a sample job, \nindividual steps\n or in a \nsingle all-in-one command\n. The first option is better for debugging each individual API call, whereas the second option is best for quickly running a job. Other Tango CLI commands are also discussed \nbelow\n.\n\n\nThe Tango directory contains various different jobs in the \nclients/\n directory; \nclients/README.md\n discusses the function of each job.  \n\n\nFind out more information about the Tango REST API \nhere\n.\n\n\nIndividual Steps\n\n\n\n\n\n\nOpen a \ncourselab\n on Tango. This will create a directory for tango to store the files for the job. \n\n\n1\npython clients/tango-cli.py -P \nport\n -k \nkey\n -l \ncourselab\n --open\n\n\n\n\n\n\n\n\n\n\nUpload files necessary for the job.\n\n\n1\n2\n3\n4\npython clients/tango-cli.py -P \nport\n -k \nkey\n -l \ncourselab\n \n\\\n\n    --upload --filename \nclients/job1/hello.sh\n\npython clients/tango-cli.py -P \nport\n -k \nkey\n -l \ncourselab\n \n\\\n\n    --upload --filename \nclients/job1/autograde-Makefile\n\n\n\n\n\n\n\n\n\n\n\nAdd the job to the queue. Note: \nlocalFile\n is the name of the file that was uploaded and \ndestFile\n is the name of the file that will be on the VM. One of the \ndestFile\n attributes must be \nMakefile\n. Furthermore, \nimage\n references the name of the VM image you want the job to be run on. For Docker it is \nautograding_image\n.\n\n\n1\n2\n3\n4\n5\n6\n$ python clients/tango-cli.py -P \nport\n -k \nkey\n -l \ncourselab\n \n\\\n\n    --addJob --infiles \n\\\n\n    \n{\nlocalFile\n : \nhello.sh\n, \ndestFile\n : \nhello.sh\n}\n \n\\\n\n    \n{\nlocalFile\n : \nautograde-Makefile\n, \ndestFile\n : \nMakefile\n}\n \n\\\n\n    --image \nimage\n --outputFile \noutputFileName\n \n\\\n\n    --jobname \njobname\n --maxsize \nmaxOutputSize\n --timeout \njobTimeout\n\n\n\n\n\n\n\n\n\n\n\nGet the job output.\n\n\n1\n2\n$ python clients/tango-cli.py -P \nport\n -k \nkey\n -l \ncourselab\n \n\\\n\n    --poll --outputFile \noutputFileName\n\n\n\n\n\n\n\nThe output file will have the following header:\n\n\n1\n2\n3\n4\n5\nAutograder \n[\ndate-time\n]\n: Received job \njobname\n:\njobid\n\nAutograder \n[\ndate-time\n]\n: Success: Autodriver returned normally\nAutograder \n[\ndate-time\n]\n: Here is the output from the autograder:\n---\n...\n\n\n\n\n\n\n\n\n\n\nSingle Command\n\n\nThe \n--runJob\n command simply runs a job from a directory of files by uploading all the files in the directory. Usage is as follows:\n\n\n1\n2\n$ python clients/tango-rest.py -P \nport\n -k \nkey\n -l \ncourselab\n \n\\\n\n     --runJob \nclients/job1/\n --image \nimage\n\n\n\n\n\n\n\nMiscallaneous Commands\n\n\nThe CLI also implements a list of commands to invoke the \nTango REST API\n, including \n--info\n, \n--prealloc\n, and \n--jobs\n. For a full list of commands, run:\n\n\n1\npython clients/tango-rest.py --help\n\n\n\n\n\n\nThe general form for each command is as follows:\n\n\n1\npython clients/tango-rest.py -P \nport\n -k \nkey\n \ncommand", 
            "title": "Tango CLI"
        }, 
        {
            "location": "/tango-cli/#tango-command-line-client", 
            "text": "This is a guide to use the command-line client ( clients/tango-cli.py ) to test and collect other valuable information from Tango. Please  setup Tango  before moving forward. This guide assumes an instance of Tango is already up and running.", 
            "title": "Tango Command Line Client"
        }, 
        {
            "location": "/tango-cli/#running-a-sample-job", 
            "text": "The CLI supports two ways to run a sample job,  individual steps  or in a  single all-in-one command . The first option is better for debugging each individual API call, whereas the second option is best for quickly running a job. Other Tango CLI commands are also discussed  below .  The Tango directory contains various different jobs in the  clients/  directory;  clients/README.md  discusses the function of each job.    Find out more information about the Tango REST API  here .", 
            "title": "Running a Sample Job"
        }, 
        {
            "location": "/tango-cli/#individual-steps", 
            "text": "Open a  courselab  on Tango. This will create a directory for tango to store the files for the job.   1 python clients/tango-cli.py -P  port  -k  key  -l  courselab  --open     Upload files necessary for the job.  1\n2\n3\n4 python clients/tango-cli.py -P  port  -k  key  -l  courselab   \\ \n    --upload --filename  clients/job1/hello.sh \npython clients/tango-cli.py -P  port  -k  key  -l  courselab   \\ \n    --upload --filename  clients/job1/autograde-Makefile      Add the job to the queue. Note:  localFile  is the name of the file that was uploaded and  destFile  is the name of the file that will be on the VM. One of the  destFile  attributes must be  Makefile . Furthermore,  image  references the name of the VM image you want the job to be run on. For Docker it is  autograding_image .  1\n2\n3\n4\n5\n6 $ python clients/tango-cli.py -P  port  -k  key  -l  courselab   \\ \n    --addJob --infiles  \\ \n     { localFile  :  hello.sh ,  destFile  :  hello.sh }   \\ \n     { localFile  :  autograde-Makefile ,  destFile  :  Makefile }   \\ \n    --image  image  --outputFile  outputFileName   \\ \n    --jobname  jobname  --maxsize  maxOutputSize  --timeout  jobTimeout      Get the job output.  1\n2 $ python clients/tango-cli.py -P  port  -k  key  -l  courselab   \\ \n    --poll --outputFile  outputFileName    The output file will have the following header:  1\n2\n3\n4\n5 Autograder  [ date-time ] : Received job  jobname : jobid \nAutograder  [ date-time ] : Success: Autodriver returned normally\nAutograder  [ date-time ] : Here is the output from the autograder:\n---\n...", 
            "title": "Individual Steps"
        }, 
        {
            "location": "/tango-cli/#single-command", 
            "text": "The  --runJob  command simply runs a job from a directory of files by uploading all the files in the directory. Usage is as follows:  1\n2 $ python clients/tango-rest.py -P  port  -k  key  -l  courselab   \\ \n     --runJob  clients/job1/  --image  image", 
            "title": "Single Command"
        }, 
        {
            "location": "/tango-cli/#miscallaneous-commands", 
            "text": "The CLI also implements a list of commands to invoke the  Tango REST API , including  --info ,  --prealloc , and  --jobs . For a full list of commands, run:  1 python clients/tango-rest.py --help   The general form for each command is as follows:  1 python clients/tango-rest.py -P  port  -k  key   command", 
            "title": "Miscallaneous Commands"
        }, 
        {
            "location": "/tango-rest/", 
            "text": "This page documents the REST API for submitting jobs to Tango. \n\n\nAuthentication\n\n\nIn order to have access to the REST interface of the Tango server, clients will first have to obtain a key from the Tango server. This key is a unique identifier of the client and it must be supplied with every HTTP request to the Tango server. If the Tango server fails to recognize the key, it does not entertain the request and returns an error message as part of the response body. \n\n\nJob Requests\n\n\nHere is a description of the requests that clients use to submit jobs:\n\n\nopen\n\n\nA request to \nopen\n consists of the client's key and an identifier for every lab, which is likely to be a combination of the course name and the lab name (i.e. \ncourselab\n for autograding jobs). \nopen\n checks if a directory for \ncourselab\n exists. If a directory for \ncourselab\n exists, a dict of MD5 hashes corresponding to every file in that directory is returned. If the directory does not exist, it is created and a folder for output files is also created within the \ncourselab\n directory. Since no files exist in the newly created directory, an empty dict of MD5 hashes is returned. \n\n\nRequest header: \nGET /open/key/courselab/\n\nRequest body: empty\n\nResponse body:\n\n\n1\n2\n3\n4\n5\n{\n \n  \nstatusMsg\n:\n \nstring\n,\n \n  \nstatusId\n:\n \nint\n,\n\n  \nfiles\n:\n \n{\n \nfileName1\n \n:\n \nmd5hash1\n,\n \nfileName2\n \n:\n \nmd5hash2\n \n...\n \n},\n\n\n}\n\n\n\n\n\n\n\nupload\n\n\nAfter receiving a list of MD5 hashes of files that exist on the Tango server, the client can choose to upload files that are different from the ones on the Tango server via successive \nupload\n commands. For each upload, the client must supply a \nfilename\n header that gives the name of the file (on the local machine) to be uploaded to Tango. One of these files must be a Makefile, which needs to contain a rule called \nautograde\n (command to drive the autograding process). \n\n\nRequest header: \nPOST /upload/key/courselab/\n\nRequest body: \nfile\n\nResponse body: \n\n\n1\n2\n3\n4\n{\n \n  \nstatusMsg\n:\n \nstring\n,\n \n  \nstatusId\n:\n \nint\n \n\n}\n\n\n\n\n\n\n\naddJob\n\n\nAfter uploading the appropriate files, the client uses this command to run the job for the files specified as \nfiles\n in the \ncourselab\n and on an instance of a particular VM \nimage\n. Each file has \nlocalFile\n and \ndestFile\n attributes which specify what the file is called on the Tango server and what it should be called when copied over to a VM (for autograding) respectively. Exactly one of the specified \nfiles\n should have the \ndestFile\n attribute set to \nMakefile\n, and the Makefile must contain a rule called \nautograde\n. Clients can also specify an optional timeout value (\ntimeout\n) and maximum output file size (\nmax_kb\n). This command is non-blocking and returns immediately with a status message. Additionally, the command accepts an optional parameter, \ncallback_url\n. If the \ncallback_url\n is specified, then the Tango server sends a \nPOST\n request to the \ncallback_url\n with the output file once the job is terminated. If the \ncallback_url\n is not specified, the client can then send a \npoll\n request for the \noutput_file\n to check the status of that job and retrieve the output file from the Tango server if autograding is complete.\n\n\nRequest header: \nPOST /addJob/key/courselab/\n\nRequest body:  \n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n{\n\n  \nimage\n:\n \nstring\n,\n                            \n#\n \nrequired\n \nVM\n \nimage\n \n(e.g.\n \nrhel.img\n)\n\n  \nfiles\n:\n \n[\n \n{\n \nlocalFile\n:\n \nstring\n,\n \n               \ndestFile\n:\n \nstring\n \n},\n \n...\n],\n    \n#\n \nrequired\n \nlist\n \nof\n \nfiles\n \nto\n \nbe\n \nused\n \nfor\n \nautograding\n\n  \njobName\n:\n \nstring\n,\n                          \n#\n \nrequired\n \nname\n \nof\n \njob\n\n  \noutput_file\n:\n \nstring\n,\n                      \n#\n \nrequired\n \nname\n \nof\n \noutput\n \nfile\n\n  \ntimeout\n:\n \nint\n,\n                             \n#\n \noptional\n \ntimeout\n \nvalue\n \n(secs)\n\n  \nmax_kb\n:\n \nint\n,\n                              \n#\n \noptional\n \nmax\n \noutput\n \nfile\n \nsize\n \n(KB)\n\n  \ncallback_url\n:\n \nstring\n                      \n#\n \noptional\n \nURL\n \nfor\n \nPOST\n \ncallback\n \nfrom\n \nserver\n \nto\n \nclient\n\n\n}\n\n\n\n\n\n\n\nResponse body: \n\n\n1\n2\n3\n4\n5\n{\n \n  \nstatusMsg\n:\n \nstring\n,\n \n  \nstatusId\n:\n \nint\n,\n \n  \njobId\n:\n \nint\n \n\n}\n\n\n\n\n\n\n\npoll\n\n\nCheck if the job for \noutputFile\n has completed. If not, return \n404: Not Found\n and a status message, otherwise return the file in the response body, and free all resources held by the job. \n\n\nRequest header: \nGET /poll/key/courselab/outputFile/\n\nRequest body: \n\n\n1\n2\n3\n{\n\n  \nempty\n\n\n}\n\n\n\n\n\n\n\nResponse body:\n\n\nautograder output file\n if autograding successful otherwise: \n\n\n1\n2\n3\n4\n{\n\n  \nstatusMsg\n:\n \nstring\n,\n \n  \nstatusId\n:\n \nint\n \n\n}\n\n\n\n\n\n\n\nAdministrative Requests\n\n\nHere are the requests that administrators use to manage the Tango service, typically from a command line client. \n\n\n/info\n\n\nThis is the \"hello, world\" request for the service. It returns a JSON object with some basic stats about the service, such as uptime, number of jobs, etc. \n\n\nRequest header: \nGET /info/\nKEY\n/\nCOURSE_LAB\n/\n\nRequest body:\n\n\n1\n2\n3\n{\n\n  \nempty\n\n\n}\n\n\n\n\n\n\n\nResponse body:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n{\n\n  \ninfo\n:\n \n{\n\n            \nnum_threads\n:\n \nint\n,\n \n            \njob_requests\n:\n \nint\n,\n \n            \nwaitvm_timeouts\n:\n \nint\n,\n \n            \nrunjob_timeouts\n:\n \nint\n,\n \n            \nelapsed_secs\n:\n \nfloat\n,\n \n            \nrunjob_errors\n:\n \nint\n,\n \n            \njob_retries\n:\n \nint\n,\n \n            \ncopyin_errors\n:\n \nint\n,\n \n            \ncopyout_errors\n:\n \nint\n\n          \n},\n \n  \nstatusMsg\n:\n \nFound info successfully\n,\n \n  \nstatusId\n:\n \n0\n\n\n}\n\n\n\n\n\n\n\n/jobs\n\n\nReturn a list of jobs. If deadjobs is set to 1, then return a list of recently completed jobs. Otherwise, return the list of currently running jobs. Note: This isn't strictly an admin request, since clients might find it useful to display jobs status, as we do in the Autolab front end. \n\n\nRequest header: \nPOST autograde.me/jobs/key/deadjobs/\n\nRequest body: empty \nResponse body: JSON \njobs\n object  \n\n\npool\n\n\nReturns a JSON object that provides info about the current state of a pool of instances spawned from some \nimage\n. The response gives the total number of instances in the pool, and the number of free instances not currently allocated to any job. \n\n\nRequest header: \nGET /pool/key/image/\n\nResponse body: JSON \npool\n object  \n\n\nprealloc\n\n\nCreates a pool of \nnum\n identical instances spawned from \nimage\n (e.g. \"rhel.img). \n\n\nRequest header: \nPOST /prealloc/key/image/num/\n\nRequest body:\n\n\n1\n2\n3\n4\n5\n{\n\n    \nvmms\n:\n \nstring\n,\n     \n#\n \nvmms\n \nto\n \nuse\n \n(e.g.\n \nlocalSSH\n)\n\n    \ncores\n:\n \nint\n,\n       \n#\n \nnumber\n \nof\n \ncores\n \nper\n \nVM\n\n    \nmemory\n:\n \nint\n,\n      \n#\n \namount\n \nof\n \nmemory\n \nper\n \nVM\n\n\n}\n\n\n\n\n\n\n\nResponse body: \n{ \"status\": \nstring\n }\n \n\n\nImplementation Notes\n\n\nTango will maintain a directory for each of the labs in a course, which is created by \nopen\n. All output files are stored within a specified output folder in this directory. Besides the runtime job queue, no other state is necessary.\n\n\nAt job execution time, Tango will copy files specified by the \nfiles\n parameter in \naddJob\n to the VM. When the VM finishes, it will copy the output file back to the lab directory.", 
            "title": "REST API"
        }, 
        {
            "location": "/tango-rest/#authentication", 
            "text": "In order to have access to the REST interface of the Tango server, clients will first have to obtain a key from the Tango server. This key is a unique identifier of the client and it must be supplied with every HTTP request to the Tango server. If the Tango server fails to recognize the key, it does not entertain the request and returns an error message as part of the response body.", 
            "title": "Authentication"
        }, 
        {
            "location": "/tango-rest/#job-requests", 
            "text": "Here is a description of the requests that clients use to submit jobs:", 
            "title": "Job Requests"
        }, 
        {
            "location": "/tango-rest/#open", 
            "text": "A request to  open  consists of the client's key and an identifier for every lab, which is likely to be a combination of the course name and the lab name (i.e.  courselab  for autograding jobs).  open  checks if a directory for  courselab  exists. If a directory for  courselab  exists, a dict of MD5 hashes corresponding to every file in that directory is returned. If the directory does not exist, it is created and a folder for output files is also created within the  courselab  directory. Since no files exist in the newly created directory, an empty dict of MD5 hashes is returned.   Request header:  GET /open/key/courselab/ \nRequest body: empty \nResponse body:  1\n2\n3\n4\n5 {  \n   statusMsg :   string ,  \n   statusId :   int , \n   files :   {   fileName1   :   md5hash1 ,   fileName2   :   md5hash2   ...   },  }", 
            "title": "open"
        }, 
        {
            "location": "/tango-rest/#upload", 
            "text": "After receiving a list of MD5 hashes of files that exist on the Tango server, the client can choose to upload files that are different from the ones on the Tango server via successive  upload  commands. For each upload, the client must supply a  filename  header that gives the name of the file (on the local machine) to be uploaded to Tango. One of these files must be a Makefile, which needs to contain a rule called  autograde  (command to drive the autograding process).   Request header:  POST /upload/key/courselab/ \nRequest body:  file \nResponse body:   1\n2\n3\n4 {  \n   statusMsg :   string ,  \n   statusId :   int   }", 
            "title": "upload"
        }, 
        {
            "location": "/tango-rest/#addjob", 
            "text": "After uploading the appropriate files, the client uses this command to run the job for the files specified as  files  in the  courselab  and on an instance of a particular VM  image . Each file has  localFile  and  destFile  attributes which specify what the file is called on the Tango server and what it should be called when copied over to a VM (for autograding) respectively. Exactly one of the specified  files  should have the  destFile  attribute set to  Makefile , and the Makefile must contain a rule called  autograde . Clients can also specify an optional timeout value ( timeout ) and maximum output file size ( max_kb ). This command is non-blocking and returns immediately with a status message. Additionally, the command accepts an optional parameter,  callback_url . If the  callback_url  is specified, then the Tango server sends a  POST  request to the  callback_url  with the output file once the job is terminated. If the  callback_url  is not specified, the client can then send a  poll  request for the  output_file  to check the status of that job and retrieve the output file from the Tango server if autograding is complete.  Request header:  POST /addJob/key/courselab/ \nRequest body:     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 { \n   image :   string ,                              #   required   VM   image   (e.g.   rhel.img ) \n   files :   [   {   localFile :   string ,  \n                destFile :   string   },   ... ],      #   required   list   of   files   to   be   used   for   autograding \n   jobName :   string ,                            #   required   name   of   job \n   output_file :   string ,                        #   required   name   of   output   file \n   timeout :   int ,                               #   optional   timeout   value   (secs) \n   max_kb :   int ,                                #   optional   max   output   file   size   (KB) \n   callback_url :   string                        #   optional   URL   for   POST   callback   from   server   to   client  }    Response body:   1\n2\n3\n4\n5 {  \n   statusMsg :   string ,  \n   statusId :   int ,  \n   jobId :   int   }", 
            "title": "addJob"
        }, 
        {
            "location": "/tango-rest/#poll", 
            "text": "Check if the job for  outputFile  has completed. If not, return  404: Not Found  and a status message, otherwise return the file in the response body, and free all resources held by the job.   Request header:  GET /poll/key/courselab/outputFile/ \nRequest body:   1\n2\n3 { \n   empty  }    Response body:  autograder output file  if autograding successful otherwise:   1\n2\n3\n4 { \n   statusMsg :   string ,  \n   statusId :   int   }", 
            "title": "poll"
        }, 
        {
            "location": "/tango-rest/#administrative-requests", 
            "text": "Here are the requests that administrators use to manage the Tango service, typically from a command line client.", 
            "title": "Administrative Requests"
        }, 
        {
            "location": "/tango-rest/#info", 
            "text": "This is the \"hello, world\" request for the service. It returns a JSON object with some basic stats about the service, such as uptime, number of jobs, etc.   Request header:  GET /info/ KEY / COURSE_LAB / \nRequest body:  1\n2\n3 { \n   empty  }    Response body:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15 { \n   info :   { \n             num_threads :   int ,  \n             job_requests :   int ,  \n             waitvm_timeouts :   int ,  \n             runjob_timeouts :   int ,  \n             elapsed_secs :   float ,  \n             runjob_errors :   int ,  \n             job_retries :   int ,  \n             copyin_errors :   int ,  \n             copyout_errors :   int \n           },  \n   statusMsg :   Found info successfully ,  \n   statusId :   0  }", 
            "title": "/info"
        }, 
        {
            "location": "/tango-rest/#jobs", 
            "text": "Return a list of jobs. If deadjobs is set to 1, then return a list of recently completed jobs. Otherwise, return the list of currently running jobs. Note: This isn't strictly an admin request, since clients might find it useful to display jobs status, as we do in the Autolab front end.   Request header:  POST autograde.me/jobs/key/deadjobs/ \nRequest body: empty \nResponse body: JSON  jobs  object", 
            "title": "/jobs"
        }, 
        {
            "location": "/tango-rest/#pool", 
            "text": "Returns a JSON object that provides info about the current state of a pool of instances spawned from some  image . The response gives the total number of instances in the pool, and the number of free instances not currently allocated to any job.   Request header:  GET /pool/key/image/ \nResponse body: JSON  pool  object", 
            "title": "pool"
        }, 
        {
            "location": "/tango-rest/#prealloc", 
            "text": "Creates a pool of  num  identical instances spawned from  image  (e.g. \"rhel.img).   Request header:  POST /prealloc/key/image/num/ \nRequest body:  1\n2\n3\n4\n5 { \n     vmms :   string ,       #   vmms   to   use   (e.g.   localSSH ) \n     cores :   int ,         #   number   of   cores   per   VM \n     memory :   int ,        #   amount   of   memory   per   VM  }    Response body:  { \"status\":  string  }", 
            "title": "prealloc"
        }, 
        {
            "location": "/tango-rest/#implementation-notes", 
            "text": "Tango will maintain a directory for each of the labs in a course, which is created by  open . All output files are stored within a specified output folder in this directory. Besides the runtime job queue, no other state is necessary.  At job execution time, Tango will copy files specified by the  files  parameter in  addJob  to the VM. When the VM finishes, it will copy the output file back to the lab directory.", 
            "title": "Implementation Notes"
        }, 
        {
            "location": "/tango-vmms/", 
            "text": "This page documents the interface for Tango's Virtual Machine Management Systems' (VMMSs) API. See \nthe vmms directory\n in Tango for example implementations. \n\n\nAPI\n\n\nThe functions necessary to implement the API are documented here. Note that for certain implementations, some of these methods will be no-ops since the VMMS doesn't require any particular instructions to perform the specified actions. Furthermore, throughout this document, we use the term \"VM\" liberally to represent any container-like object on which Tango jobs may be run. \n\n\ninitializeVM\n\n\n1\ninitializeVM\n(\nself\n,\n \nvm\n)\n\n\n\n\n\n\n\nCreates a new VM instance for the VMMS based on the fields of \nvm\n, which is a \nTangoMachine\n object defined in \ntangoObjects.py\n.\n\n\nwaitVM\n\n\n1\nwaitVM\n(\nself\n,\n \nvm\n,\n \nmax_secs\n)\n\n\n\n\n\n\n\nWaits at most \nmax_secs\n for a VM to be ready to run jobs. Returns an error if the VM is not ready after \nmax_secs\n.\n\n\ncopyIn\n\n\n1\ncopyIn\n(\nself\n,\n \nvm\n,\n \ninputFiles\n)\n\n\n\n\n\n\n\nCopies the input files for a job into the VM. \ninputFiles\n is a list of \nInputFile\n objects defined in \ntangoObjects.py\n. For each \nInputFile\n object, \nfile.localFile\n is the name of the file on the Tango host machine and \nfile.destFile\n is what the name of the file should be on the VM. \n\n\nrunJob\n\n\n1\nrunJob\n(\nself\n,\n \nvm\n,\n \nrunTimeout\n,\n \nmaxOutputFileSize\n)\n\n\n\n\n\n\n\nRuns the autodriver binary on the VM. The autodriver runs \nmake\n on the VM (which in turn runs the job via the \nMakefile\n that was provided as a part of the input files for the job). The output from the autodriver most likely should be redirected to some feedback file to be used in the next method of the API. \n\n\ncopyOut\n\n\n1\ncopyOut\n(\nself\n,\n \nvm\n,\n \ndestFile\n)\n\n\n\n\n\n\n\nCopies the output file for the job out of the VM into \ndestFile\n on the Tango host machine. \n\n\ndestroyVM\n\n\n1\ndestroyVM\n(\nself\n,\n \nvm\n)\n\n\n\n\n\n\n\nRemoves a VM from the Tango system. \n\n\nsafeDestroyVM\n\n\n1\nsafeDestroyVM\n(\nself\n,\n \nvm\n)\n\n\n\n\n\n\n\nRemoves a VM from the Tango system and makes sure that it has been removed. \n\n\ngetVMs\n\n\n1\ngetVMs\n(\nself\n)\n\n\n\n\n\n\n\nReturns a complete list of VMs associated with this Tango system. \n\n\nDocker VMMS Setup\n\n\n\n\n\n\nInstall docker on host machine by following instructions on the \ndocker installation page\n. Ensure docker is running:\n\n\n1\n2\n$ docker ps\n\n# CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES\n\n\n\n\n\n\n\n\n\n\n\nBuild base Docker image from root Tango directory.\n\n\n1\n2\n3\ncd\n path/to/Tango\ndocker build -t autograding_image vmms/\ndocker images autograding_image    \n# Check if image built\n\n\n\n\n\n\n\n\n\n\n\nUpdate \nVMMS_NAME\n in \nconfig.py\n.\n\n\n1\n2\n# in config.py\n\n\nVMMS_NAME\n \n=\n \nlocalDocker", 
            "title": "VMMS API"
        }, 
        {
            "location": "/tango-vmms/#api", 
            "text": "The functions necessary to implement the API are documented here. Note that for certain implementations, some of these methods will be no-ops since the VMMS doesn't require any particular instructions to perform the specified actions. Furthermore, throughout this document, we use the term \"VM\" liberally to represent any container-like object on which Tango jobs may be run.", 
            "title": "API"
        }, 
        {
            "location": "/tango-vmms/#initializevm", 
            "text": "1 initializeVM ( self ,   vm )    Creates a new VM instance for the VMMS based on the fields of  vm , which is a  TangoMachine  object defined in  tangoObjects.py .", 
            "title": "initializeVM"
        }, 
        {
            "location": "/tango-vmms/#waitvm", 
            "text": "1 waitVM ( self ,   vm ,   max_secs )    Waits at most  max_secs  for a VM to be ready to run jobs. Returns an error if the VM is not ready after  max_secs .", 
            "title": "waitVM"
        }, 
        {
            "location": "/tango-vmms/#copyin", 
            "text": "1 copyIn ( self ,   vm ,   inputFiles )    Copies the input files for a job into the VM.  inputFiles  is a list of  InputFile  objects defined in  tangoObjects.py . For each  InputFile  object,  file.localFile  is the name of the file on the Tango host machine and  file.destFile  is what the name of the file should be on the VM.", 
            "title": "copyIn"
        }, 
        {
            "location": "/tango-vmms/#runjob", 
            "text": "1 runJob ( self ,   vm ,   runTimeout ,   maxOutputFileSize )    Runs the autodriver binary on the VM. The autodriver runs  make  on the VM (which in turn runs the job via the  Makefile  that was provided as a part of the input files for the job). The output from the autodriver most likely should be redirected to some feedback file to be used in the next method of the API.", 
            "title": "runJob"
        }, 
        {
            "location": "/tango-vmms/#copyout", 
            "text": "1 copyOut ( self ,   vm ,   destFile )    Copies the output file for the job out of the VM into  destFile  on the Tango host machine.", 
            "title": "copyOut"
        }, 
        {
            "location": "/tango-vmms/#destroyvm", 
            "text": "1 destroyVM ( self ,   vm )    Removes a VM from the Tango system.", 
            "title": "destroyVM"
        }, 
        {
            "location": "/tango-vmms/#safedestroyvm", 
            "text": "1 safeDestroyVM ( self ,   vm )    Removes a VM from the Tango system and makes sure that it has been removed.", 
            "title": "safeDestroyVM"
        }, 
        {
            "location": "/tango-vmms/#getvms", 
            "text": "1 getVMs ( self )    Returns a complete list of VMs associated with this Tango system.", 
            "title": "getVMs"
        }, 
        {
            "location": "/tango-vmms/#docker-vmms-setup", 
            "text": "Install docker on host machine by following instructions on the  docker installation page . Ensure docker is running:  1\n2 $ docker ps # CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES      Build base Docker image from root Tango directory.  1\n2\n3 cd  path/to/Tango\ndocker build -t autograding_image vmms/\ndocker images autograding_image     # Check if image built      Update  VMMS_NAME  in  config.py .  1\n2 # in config.py  VMMS_NAME   =   localDocker", 
            "title": "Docker VMMS Setup"
        }, 
        {
            "location": "/one-click/", 
            "text": "Autolab + Tango OneClick Installation\n\n\nOneClick is the fastest way to install Autolab and Tango on an Ubuntu VM. The installation uses packages Autolab, MySQL, and Tango into seperate Docker containers with specific exposed ports for communication.\n\n\nThere are two types of installations. A local development setup and a real-world ready setup that requires SSL certificates, email service configuration, and domain name registration. Use the local setup for experimentation before deploying in a real-world scenario on such apps like Heroku, EC2, or DigitalOcean, among others.\n\n\nLocal OneClick Setup\n\n\n1. Prepare an Ubuntu VM\n\n\nThese installation instructions are for Ubuntu. If you're on other operating system, we recommend you set up an Ubuntu virtual machine first with \nVirtual Box\n.\n\n\nAbout the System Configuration:\n\n\n\n\nUbuntu 14.04( or higher) 64bit\n\n\n2GB memory + 20GB disk\n\n\n\n\nTo set up, \nInstall Ubuntu on Virtualbox\n may help you.\n\n\nOptional:\n\n\nFor better experience, we also recommend you to \"insert guest additional CD image\" for your virtual machine to enable full screen. \n(If you installed Ubuntu 16+, you can skip this)\n\n\n1\nDevices \n Insert guest additional CD image\n\n\n\n\n\n\nAlso enable clipboard share for easier copy and paste between host and VM.\n\n\n1\nSettings \n Advanced \n Shared Clipboard \n Bidrectional\n\n\n\n\n\n\nYou need to restart your virtual machine to validate these optional changes.\n\n\n2. Download\n\n\nRoot is required to install Autolab:\n\n\n1\nsudo -i\n\n\n\n\n\n\nClone repo:\n\n\n1\ngit clone https://github.com/autolab/autolab-oneclick.git\n;\n \ncd\n autolab-oneclick\n\n\n\n\n\n\n3. Installation\n\n\nRun the following in the autolab-oneclick folder\n\n\n1\n./install -l\n\n\n\n\n\n\nThis will take a few minutes. Once you see \nAutolab Installation Finished\n, ensure all docker containers are running:\n\n\n1\n2\n3\n4\n5\ndocker ps\n\n# CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                    PORTS                     NAMES\n\n\n# c8679844bbfa        local_web           \n/sbin/my_init\n          3 months ago        Exited (0) 3 months ago                             local_web_1         721 kB (virtual 821 MB)\n\n\n# 45a9e30241ea        mysql               \ndocker-entrypoint...\n   3 months ago        Exited (0) 3 months ago   0.0.0.0:32768-\n3306/tcp   local_db_1          0 B (virtual 383 MB)\n\n\n# 1ef089e2dca4        local_tango         \nsh start.sh\n            3 months ago        Exited (0) 3 months ago   0.0.0.0:8600-\n8600/tcp    local_tango_1       91.1 kB (virtual 743 MB)\n\n\n\n\n\n\n\nNow Autolab is successfully installed and running on your virtual machine.\nOpen your browser and visit \nlocalhost:3000\n, you will see the landing page of Autolab.\n\n\nFollow the instructions \nhere\n to test out your set up.\n\n\nServer/Production OneClick Setup\n\n\n1. Provision a Server\n\n\nServer\n\n\nIf you don't already have a server, we recommend a VPS (virtual private server). Here are a couple popular VPS providers:\n\n\n\n\nDigitalOcean\n (recommended)\n\n\nAmazon Lightsail\n\n\nGoogle Cloud Platform\n\n\n\n\nDomain name\n\n\n(A domain name is both required by SSL and email service.)\n\n\nIn your DNS provider:\n\n\n\n\nAdd www and @ records pointing to the ip address of your server.\n\n\nAdd DKIM and SFF records by creating TXT records after you finish the email service part.\n\n\n\n\nSSL\n\n\nYou can run Autolab with or without HTTPS encryption. We strongly recommend you run it with HTTPS.\n\n\nHere are a few options to get the SSL certificate and key:\n\n\n\n\n\n\nGo through your school/organization\n\n\nMany universities have a program whereby they'll grant SSL certificates to students and faculty for free. Some of these programs require you to be using a school-related domain name, but some don't. You should be able to find out more information from your school's IT department.\n\n\n\n\n\n\nUse paid service: SSLmate\n\n\nYou can follow this \nsimple guide\n to get your paid SSL with \nSSLMate\n in the simplest way.\n\n\n\n\n\n\nEmail Service\n\n\nAutolab uses email for various features, include sending out user confirmation emails and instructor-to-student bulk emails. You can use MailChimp + Mandrill to configure transactional email. \n\n\n\n\n\n\nCreate a MailChimp account \nhere\n\n\n\n\n\n\nAdd Mandrill using \nthese instructions\n\n\n\n\n\n\nGo to the settings page and create a new API key\n\n\n\n\n\n\nFrom the Mailchimp/Mandrill Domains settings page, add your domain \n\n\n\n\n\n\nConfigure the DKIM and SFF settings by creating TXT records with your DNS provider (they link to some instructions for how to do this, but the process will differ depending on which DNS provider you are using. Try Google!).\n\n\n\n\n\n\n2. Download and Configuration\n\n\n\n\n\n\nUse root to install Autolab\n\n\n1\nsudo -i\n\n\n\n\n\n\n\n\n\n\nClone the installation package\n\n\n1\ngit clone https://github.com/autolab/autolab-oneclick.git\n;\n \ncd\n autolab-oneclick\n\n\n\n\n\n\n\n\n\n\nGenerate a new secret key for Devise Auth Configuration:\n\n\n1\npython -c \nimport random; print hex(random.getrandbits(512))[2:-1]\n\n\n\n\n\n\n\nUpdate the values in \nserver/configs/devise.rb\n\n\n1\n2\nconfig\n.\nsecret_key\n \n=\n \nGENERATED_SECRET_KEY\n\n\nconfig\n.\nmailer_sender\n \n=\n \nEMAIL_ADDRESS_WITH_YOUR_HOSTNAME\n\n\n\n\n\n\n\n\n\n\n\nCopy your SSL certificate and key file into the \nserver/ssl\n directory.\n\n\n\n\n\n\nConfigure Nginx in \nserver/configs/nginx.conf\n\n\n1\n2\n3\nserver_name\n \nYOUR_SERVER_DOMAIN\n\n\nssl_certificate\n \n/path/\nto\n/\nssl_certificate\n/\nfile\n\n\nssl_certificate_key\n \n/path/\nto\n/\nssl_certificate_key\n/\nfile\n\n\n\n\n\n\n\n\n\n\n\nConfigure Email in \nserver/configs/production.rb\n. Update the address, port, user_name, password and domain with your email service informations. For Mandrill, go to \"SMTP \n API Info\" to see the informations.\n\n\n\n\n\n\n3. Installation\n\n\n\n\n\n\nStart Installation\n\n\n1\n2\ncd\n autolab-oneclick\n./install -s\n\n\n\n\n\n\nAnswer the prompts and wait until you see \nAutolab Installation Finished\n.\n\n\n\n\n\n\nEnsure docker containers are running\n\n\n1\n2\n3\n4\n5\ndocker ps\n\n# CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                    PORTS                     NAMES\n\n\n# c8679844bbfa        local_web           \n/sbin/my_init\n          3 months ago        Exited (0) 3 months ago                             local_web_1         721 kB (virtual 821 MB)\n\n\n# 45a9e30241ea        mysql               \ndocker-entrypoint...\n   3 months ago        Exited (0) 3 months ago   0.0.0.0:32768-\n3306/tcp   local_db_1          0 B (virtual 383 MB)\n\n\n# 1ef089e2dca4        local_tango         \nsh start.sh\n            3 months ago        Exited (0) 3 months ago   0.0.0.0:8600-\n8600/tcp    local_tango_1       91.1 kB (virtual 743 MB)\n\n\n\n\n\n\n\n\n\n\n\nNow Autolab is successfully installed and running on your virtual machine.\nOpen your browser and visit \nhttps://yourdomainname\n, to see the landing page of Autolab.\n\n\nFollow the instructions \nhere\n to test out your set up.\n\n\nTesting\n\n\nLogin with the following credentials:\n\n\n1\n2\nemail: admin@foo.bar\npassword: adminfoobar\n\n\n\n\n\n\nWe have populated dummy data for you to test with.\n\n\nRun the following commands to cleanup the dummy data:\n\n\n1\n2\ncd local\ndocker-compose run --rm -e RAILS_ENV=production web rake autolab:depopulate", 
            "title": "OneClick Install"
        }, 
        {
            "location": "/one-click/#autolab-tango-oneclick-installation", 
            "text": "OneClick is the fastest way to install Autolab and Tango on an Ubuntu VM. The installation uses packages Autolab, MySQL, and Tango into seperate Docker containers with specific exposed ports for communication.  There are two types of installations. A local development setup and a real-world ready setup that requires SSL certificates, email service configuration, and domain name registration. Use the local setup for experimentation before deploying in a real-world scenario on such apps like Heroku, EC2, or DigitalOcean, among others.", 
            "title": "Autolab + Tango OneClick Installation"
        }, 
        {
            "location": "/one-click/#local-oneclick-setup", 
            "text": "", 
            "title": "Local OneClick Setup"
        }, 
        {
            "location": "/one-click/#1-prepare-an-ubuntu-vm", 
            "text": "These installation instructions are for Ubuntu. If you're on other operating system, we recommend you set up an Ubuntu virtual machine first with  Virtual Box .  About the System Configuration:   Ubuntu 14.04( or higher) 64bit  2GB memory + 20GB disk   To set up,  Install Ubuntu on Virtualbox  may help you.  Optional:  For better experience, we also recommend you to \"insert guest additional CD image\" for your virtual machine to enable full screen. \n(If you installed Ubuntu 16+, you can skip this)  1 Devices   Insert guest additional CD image   Also enable clipboard share for easier copy and paste between host and VM.  1 Settings   Advanced   Shared Clipboard   Bidrectional   You need to restart your virtual machine to validate these optional changes.", 
            "title": "1. Prepare an Ubuntu VM"
        }, 
        {
            "location": "/one-click/#2-download", 
            "text": "Root is required to install Autolab:  1 sudo -i   Clone repo:  1 git clone https://github.com/autolab/autolab-oneclick.git ;   cd  autolab-oneclick", 
            "title": "2. Download"
        }, 
        {
            "location": "/one-click/#3-installation", 
            "text": "Run the following in the autolab-oneclick folder  1 ./install -l   This will take a few minutes. Once you see  Autolab Installation Finished , ensure all docker containers are running:  1\n2\n3\n4\n5 docker ps # CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                    PORTS                     NAMES  # c8679844bbfa        local_web            /sbin/my_init           3 months ago        Exited (0) 3 months ago                             local_web_1         721 kB (virtual 821 MB)  # 45a9e30241ea        mysql                docker-entrypoint...    3 months ago        Exited (0) 3 months ago   0.0.0.0:32768- 3306/tcp   local_db_1          0 B (virtual 383 MB)  # 1ef089e2dca4        local_tango          sh start.sh             3 months ago        Exited (0) 3 months ago   0.0.0.0:8600- 8600/tcp    local_tango_1       91.1 kB (virtual 743 MB)    Now Autolab is successfully installed and running on your virtual machine.\nOpen your browser and visit  localhost:3000 , you will see the landing page of Autolab.  Follow the instructions  here  to test out your set up.", 
            "title": "3. Installation"
        }, 
        {
            "location": "/one-click/#serverproduction-oneclick-setup", 
            "text": "", 
            "title": "Server/Production OneClick Setup"
        }, 
        {
            "location": "/one-click/#1-provision-a-server", 
            "text": "Server  If you don't already have a server, we recommend a VPS (virtual private server). Here are a couple popular VPS providers:   DigitalOcean  (recommended)  Amazon Lightsail  Google Cloud Platform   Domain name  (A domain name is both required by SSL and email service.)  In your DNS provider:   Add www and @ records pointing to the ip address of your server.  Add DKIM and SFF records by creating TXT records after you finish the email service part.   SSL  You can run Autolab with or without HTTPS encryption. We strongly recommend you run it with HTTPS.  Here are a few options to get the SSL certificate and key:    Go through your school/organization  Many universities have a program whereby they'll grant SSL certificates to students and faculty for free. Some of these programs require you to be using a school-related domain name, but some don't. You should be able to find out more information from your school's IT department.    Use paid service: SSLmate  You can follow this  simple guide  to get your paid SSL with  SSLMate  in the simplest way.", 
            "title": "1. Provision a Server"
        }, 
        {
            "location": "/one-click/#email-service", 
            "text": "Autolab uses email for various features, include sending out user confirmation emails and instructor-to-student bulk emails. You can use MailChimp + Mandrill to configure transactional email.     Create a MailChimp account  here    Add Mandrill using  these instructions    Go to the settings page and create a new API key    From the Mailchimp/Mandrill Domains settings page, add your domain     Configure the DKIM and SFF settings by creating TXT records with your DNS provider (they link to some instructions for how to do this, but the process will differ depending on which DNS provider you are using. Try Google!).", 
            "title": "Email Service"
        }, 
        {
            "location": "/one-click/#2-download-and-configuration", 
            "text": "Use root to install Autolab  1 sudo -i     Clone the installation package  1 git clone https://github.com/autolab/autolab-oneclick.git ;   cd  autolab-oneclick     Generate a new secret key for Devise Auth Configuration:  1 python -c  import random; print hex(random.getrandbits(512))[2:-1]    Update the values in  server/configs/devise.rb  1\n2 config . secret_key   =   GENERATED_SECRET_KEY  config . mailer_sender   =   EMAIL_ADDRESS_WITH_YOUR_HOSTNAME      Copy your SSL certificate and key file into the  server/ssl  directory.    Configure Nginx in  server/configs/nginx.conf  1\n2\n3 server_name   YOUR_SERVER_DOMAIN  ssl_certificate   /path/ to / ssl_certificate / file  ssl_certificate_key   /path/ to / ssl_certificate_key / file      Configure Email in  server/configs/production.rb . Update the address, port, user_name, password and domain with your email service informations. For Mandrill, go to \"SMTP   API Info\" to see the informations.", 
            "title": "2. Download and Configuration"
        }, 
        {
            "location": "/one-click/#3-installation_1", 
            "text": "Start Installation  1\n2 cd  autolab-oneclick\n./install -s   Answer the prompts and wait until you see  Autolab Installation Finished .    Ensure docker containers are running  1\n2\n3\n4\n5 docker ps # CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                    PORTS                     NAMES  # c8679844bbfa        local_web            /sbin/my_init           3 months ago        Exited (0) 3 months ago                             local_web_1         721 kB (virtual 821 MB)  # 45a9e30241ea        mysql                docker-entrypoint...    3 months ago        Exited (0) 3 months ago   0.0.0.0:32768- 3306/tcp   local_db_1          0 B (virtual 383 MB)  # 1ef089e2dca4        local_tango          sh start.sh             3 months ago        Exited (0) 3 months ago   0.0.0.0:8600- 8600/tcp    local_tango_1       91.1 kB (virtual 743 MB)      Now Autolab is successfully installed and running on your virtual machine.\nOpen your browser and visit  https://yourdomainname , to see the landing page of Autolab.  Follow the instructions  here  to test out your set up.", 
            "title": "3. Installation"
        }, 
        {
            "location": "/one-click/#testing", 
            "text": "Login with the following credentials:  1\n2 email: admin@foo.bar\npassword: adminfoobar   We have populated dummy data for you to test with.  Run the following commands to cleanup the dummy data:  1\n2 cd local\ndocker-compose run --rm -e RAILS_ENV=production web rake autolab:depopulate", 
            "title": "Testing"
        }
    ]
}